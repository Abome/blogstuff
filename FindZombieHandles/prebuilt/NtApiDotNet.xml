<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NtApiDotNet</name>
    </assembly>
    <members>
        <member name="T:NtApiDotNet.CreateUserProcess">
            <summary>
            Class to create a new user process using the native APIs.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ImagePath">
            <summary>
            Path to the executable to start.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ConfigImagePath">
            <summary>
            Path to the executable to start which is passed in the process configuration.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.CommandLine">
            <summary>
            Command line
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.Environment">
            <summary>
            Prepared environment block.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.WindowTitle">
            <summary>
            Title of the main window.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.DllPath">
            <summary>
            Path to DLLs.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.CurrentDirectory">
            <summary>
            Current directory for new process
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.DesktopInfo">
            <summary>
            Desktop information value
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ShellInfo">
            <summary>
            Shell information value
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.RuntimeData">
            <summary>
            Runtime data.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ProhibitedImageCharacteristics">
            <summary>
            Prohibited image characteristics for new process
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.AdditionalFileAccess">
            <summary>
            Additional file access for opened executable file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ProcessFlags">
            <summary>
            Process create flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ThreadFlags">
            <summary>
            Thread create flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.InitFlags">
            <summary>
            Initialization flags
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ParentProcess">
            <summary>
            Parent process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.RestrictChildProcess">
            <summary>
            Restrict new child processes
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.OverrideRestrictChildProcess">
            <summary>
            Override restrict child process
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.AdditionalAttributes">
            <summary>
            Extra process/thread attributes
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcess.AddProtectionLevel(NtApiDotNet.PsProtectedType,NtApiDotNet.PsProtectedSigner)">
            <summary>
            Added protected process protection level.
            </summary>
            <param name="type">The type of protected process.</param>
            <param name="signer">The signer level.</param>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.ReturnOnError">
            <summary>
            Return on error instead of throwing an exception.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcess.TerminateOnDispose">
            <summary>
            Whether to terminate the process on dispose.
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcess.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcess.Fork">
            <summary>
            For the current process
            </summary>
            <returns>The new forked process result</returns>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcess.Start(System.String)">
            <summary>
            Start the new process
            </summary>
            <param name="image_path">The image path to the file to execute</param>
            <returns>The result of the process creation</returns>
        </member>
        <member name="T:NtApiDotNet.CreateUserProcessResult">
            <summary>
            Result from a native create process call.
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.Process">
            <summary>
            Handle to the process
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.Thread">
            <summary>
            Handle to the initial thread
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.ImageFile">
            <summary>
            Handle to the image file
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.SectionHandle">
            <summary>
            Handle to the image section
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.IFEOKeyHandle">
            <summary>
            Handle to the IFEO key (if it exists)
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.ImageInfo">
            <summary>
            Image information
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.ClientId">
            <summary>
            Client ID of process and thread
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.ProcessId">
            <summary>
            Process ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.ThreadId">
            <summary>
            Thread ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.Status">
            <summary>
            Create status
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.Success">
            <summary>
            True if create succeeded
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.CreateInfo">
            <summary>
            Result of the create information
            </summary>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.CreateState">
            <summary>
            Creation state
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcessResult.Terminate(NtApiDotNet.NtStatus)">
            <summary>
            Terminate the process
            </summary>
            <param name="exitcode">Exit code for termination</param>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcessResult.Resume">
            <summary>
            Resume initial thread
            </summary>
            <returns>The suspend count</returns>
        </member>
        <member name="P:NtApiDotNet.CreateUserProcessResult.TerminateOnDispose">
            <summary>
            Set to true to terminate process on disposal
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcessResult.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:NtApiDotNet.CreateUserProcessResult.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NtApiDotNet.DisposableList`1">
            <summary>
            Represents a list where the elements can be trivially disposed in one go.
            </summary>
            <typeparam name="T">An IDisposable implementing type</typeparam>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">The initial capacity of the list</param>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor
            </summary>
            <param name="collection">A collection to initialize the list</param>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.AddResource``1(``0)">
            <summary>
            Add a resource to the list and return a reference to it.
            </summary>
            <typeparam name="R">The type of resource to add.</typeparam>
            <param name="resource">The resource object.</param>
            <returns>The added resource.</returns>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.AddResource``1">
            <summary>
            Add a resource to the list and return a reference to it.
            </summary>
            <typeparam name="R">The type of resource to add.</typeparam>
            <returns>The added resource.</returns>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.ToArrayAndClear">
            <summary>
            Convert this list to an array then clear it to the disposal no longer happens.
            </summary>
            <returns>The elements as an array.</returns>
            <remarks>After doing this the current list will be cleared.</remarks>
        </member>
        <member name="M:NtApiDotNet.DisposableList`1.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="T:NtApiDotNet.DisposableList">
            <summary>
            Implementation of disposable list which just accepts IDisposable objects.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SafeHandleList">
            <summary>
            Disposable list of safe handles
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeHandleList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeHandleList.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity">The initial capacity of the list</param>
        </member>
        <member name="M:NtApiDotNet.SafeHandleList.#ctor(System.Collections.Generic.IEnumerable{System.Runtime.InteropServices.SafeHandle})">
            <summary>
            Constructor
            </summary>
            <param name="collection">A collection to initialize the list</param>
        </member>
        <member name="M:NtApiDotNet.SafeHandleList.DangerousMove">
            <summary>
            Move the handle list to a new disposable list.
            </summary>
            <returns>The list of handles which have been moved.</returns>
            <remarks>After doing this the current list will be cleared.</remarks>
        </member>
        <member name="T:NtApiDotNet.EaBufferEntryFlags">
            <summary>
            Flags for an EA entry
            </summary>
        </member>
        <member name="F:NtApiDotNet.EaBufferEntryFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.EaBufferEntryFlags.NeedEa">
            <summary>
            Processor must handle this EA.
            </summary>
        </member>
        <member name="T:NtApiDotNet.EaBufferEntry">
            <summary>
            A single EA entry.
            </summary>
        </member>
        <member name="P:NtApiDotNet.EaBufferEntry.Name">
            <summary>
            Name of the entry
            </summary>
        </member>
        <member name="P:NtApiDotNet.EaBufferEntry.Data">
            <summary>
            Data associated with the entry
            </summary>
        </member>
        <member name="P:NtApiDotNet.EaBufferEntry.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.#ctor(System.String,System.Byte[],NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">Data associated with the entry</param>
            <param name="flags">Flags for entry.</param>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.#ctor(System.String,System.Int32,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">Data associated with the entry</param>
            <param name="flags">Flags for entry.</param>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.#ctor(System.String,System.String,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">Data associated with the entry</param>
            <param name="flags">Flags for entry.</param>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.DataAsString">
            <summary>
            Get the EA buffer data as a string.
            </summary>
            <returns>The data as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.DataAsInt32">
            <summary>
            Get the EA buffer data as an Int32.
            </summary>
            <returns>The data as an Int32.</returns>
        </member>
        <member name="M:NtApiDotNet.EaBufferEntry.ToString">
            <summary>
            Convert entry to a string
            </summary>
            <returns>The entry as a string</returns>
        </member>
        <member name="T:NtApiDotNet.EaBuffer">
            <summary>
            Class to create an Extended Attributes buffer for NtCreateFile
            </summary>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.#ctor(System.Collections.Generic.IEnumerable{NtApiDotNet.EaBufferEntry})">
            <summary>
            Constructor
            </summary>
            <param name="entries">List of entries to add.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.#ctor(System.Byte[])">
            <summary>
            Constructor from a binary EA buffer
            </summary>
            <param name="buffer">The EA buffer to parse</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.#ctor(NtApiDotNet.EaBuffer)">
            <summary>
            Constructor
            </summary>
            <param name="buffer">Existing buffer to copy.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.AddEntry(NtApiDotNet.EaBufferEntry)">
            <summary>
            Add a new EA entry from an old entry. The data will be cloned.
            </summary>
            <param name="entry">The entry to add.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.AddEntry(System.String,System.Byte[],NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Add a new EA entry
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data, will be cloned</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.AddEntry(System.String,System.Int32,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Add a new EA entry
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.AddEntry(System.String,System.String,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Add a new EA entry
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.GetEntry(System.String)">
            <summary>
            Get an entry by name.
            </summary>
            <param name="name">The name of the entry.</param>
            <returns>The found entry.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no entry by that name.</exception>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.RemoveEntry(NtApiDotNet.EaBufferEntry)">
            <summary>
            Remove an entry from the buffer.
            </summary>
            <param name="entry">The entry to remove.</param>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.RemoveEntry(System.String)">
            <summary>
            Remove an entry from the buffer by name.
            </summary>
            <param name="name">The name of the entry.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no entry by that name.</exception>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.ToByteArray">
            <summary>
            Convert to a byte array
            </summary>
            <returns>The byte array</returns>
        </member>
        <member name="P:NtApiDotNet.EaBuffer.Entries">
            <summary>
            Get the list of entries.
            </summary>
        </member>
        <member name="P:NtApiDotNet.EaBuffer.Count">
            <summary>
            Get number of entries.
            </summary>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.ContainsEntry(System.String)">
            <summary>
            Get whether the buffer contains a specific entry.
            </summary>
            <param name="name">The name of the entry.</param>
            <returns>True if the buffer contains an entry with the name.</returns>
        </member>
        <member name="P:NtApiDotNet.EaBuffer.Item(System.String)">
            <summary>
            Index to get an entry by name.
            </summary>
            <param name="name">The name of the entry.</param>
            <returns>The found entry.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no entry by that name.</exception>
        </member>
        <member name="M:NtApiDotNet.EaBuffer.Clear">
            <summary>
            Clear all entries.
            </summary>
        </member>
        <member name="T:NtApiDotNet.AlpcAccessRights">
            <summary>
            Access rights for ALPC
            </summary>
        </member>
        <member name="T:NtApiDotNet.AlpcPortInformationClass">
            <summary>
            ALPC Port Information Class
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtAlpc">
            <summary>
            Class to represent an ALPC port.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtAtom">
            <summary>
            Class to handle NT atoms
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtAtom.Atom">
            <summary>
            The atom value
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAtom.Add(System.String)">
            <summary>
            Add an atom name
            </summary>
            <param name="name">The name to add</param>
            <returns>A reference to the atom</returns>
        </member>
        <member name="P:NtApiDotNet.NtAtom.Name">
            <summary>
            Get the name of the stom
            </summary>
            <returns>The name of the atom</returns>
        </member>
        <member name="M:NtApiDotNet.NtAtom.GetAtoms">
            <summary>
            Enumerate all atoms.
            </summary>
            <returns>An enumeration of all atoms on the system.</returns>
        </member>
        <member name="T:NtApiDotNet.NtDebug">
            <summary>
            Class representing a NT Debug object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.DebugObjectFlags)">
            <summary>
            Create a debug object
            </summary>
            <param name="name">The debug object name (can be null)</param>
            <param name="root">The root directory for relative names</param>
            <param name="flags">Debug object flags.</param>
            <returns>The debug object</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.DebugAccessRights,NtApiDotNet.DebugObjectFlags)">
            <summary>
            Create a debug object
            </summary>
            <param name="desired_access">Desired access for the debug object</param>
            <param name="object_attributes">Object attributes for debug object</param>
            <param name="flags">Debug object flags.</param>
            <returns>The debug object</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.DebugAccessRights,NtApiDotNet.DebugObjectFlags,System.Boolean)">
            <summary>
            Create a debug object
            </summary>
            <param name="desired_access">Desired access for the debug object</param>
            <param name="object_attributes">Object attributes for debug object</param>
            <param name="flags">Debug object flags.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Create">
            <summary>
            Create a debug object
            </summary>
            <returns>The debug object</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.DebugAccessRights)">
            <summary>
            Open a named debug object
            </summary>
            <param name="name">The debug object name </param>
            <param name="root">The root directory for relative names</param>
            <param name="desired_access">Desired access for the debug object</param>
            <returns>The debug object</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.DebugAccessRights)">
            <summary>
            Open a named debug object
            </summary>
            <param name="object_attributes">The object attributes to open.</param>
            <param name="desired_access">Desired access for the debug object</param>
            <returns>The debug object</returns>
        </member>
        <member name="M:NtApiDotNet.NtDebug.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.DebugAccessRights,System.Boolean)">
            <summary>
            Open a named debug object
            </summary>
            <param name="object_attributes">The object attributes to open.</param>
            <param name="desired_access">Desired access for the debug object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="T:NtApiDotNet.NtDesktop">
            <summary>
            Class which represents a desktop object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtDesktop.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open a desktop by name.
            </summary>
            <param name="desktop_name">The name of the desktop.</param>
            <param name="root">Optional root object</param>
            <returns>An instance of NtDesktop.</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtDesktop.Open(System.String)">
            <summary>
            Open a desktop by name.
            </summary>
            <param name="desktop_name">The name of the desktop.</param>
            <returns>An instance of NtDesktop.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDesktop.Create(System.String,NtApiDotNet.NtObject)">
            <summary>
            Create a new desktop.
            </summary>
            <param name="desktop_name">The name of the desktop.</param>
            <param name="root">Optional root object</param>
            <returns>An instance of NtDesktop.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDesktop.Create(System.String)">
            <summary>
            Create a new desktop.
            </summary>
            <param name="desktop_name">The name of the desktop.</param>
            <returns>An instance of NtDesktop.</returns>
        </member>
        <member name="P:NtApiDotNet.ObjectDirectoryInformation.Children">
            <summary>
            Children of entry if IsDirectory is try (and 
            </summary>
        </member>
        <member name="T:NtApiDotNet.DirectoryAccessRights">
            <summary>
            Directory access rights.
            </summary>
        </member>
        <member name="T:NtApiDotNet.BoundaryDescriptorFlags">
            <summary>
            Flags for a boundary descriptor
            </summary>
        </member>
        <member name="F:NtApiDotNet.BoundaryDescriptorFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NtApiDotNet.BoundaryDescriptorFlags.AddPackageSid">
            <summary>
            Automatically add the AppContainer package SID to the boundary
            </summary>
        </member>
        <member name="T:NtApiDotNet.BoundaryDescriptor">
            <summary>
            Class which represents a private namespace boundary descriptor
            </summary>    
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.#ctor(System.String,NtApiDotNet.BoundaryDescriptorFlags)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the boundary</param>
            <param name="flags">Additional flags for the boundary</param>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the boundary</param>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.AddSid(NtApiDotNet.Sid)">
            <summary>
            Add a SID to the boundary descriptor.
            </summary>
            <remarks>This SID is used in an access check when creating or deleting private namespaces.</remarks>
            <param name="sid">The SID to add.</param>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.AddIntegrityLevel(NtApiDotNet.TokenIntegrityLevel)">
            <summary>
            Add an integrity level to the boundary descriptor.
            </summary>
            <remarks>This integrity level is used in an access check when creating or deleting private namespaces.</remarks>
            <param name="integrity_level">The integrity level to add.</param>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.AddSids(System.Collections.Generic.IEnumerable{NtApiDotNet.Sid})">
            <summary>
            Add a list of SIDs to the boundary descriptor. 
            </summary>
            <param name="sids">The SIDs to add. This can include normal and integrity level SIDs</param>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.AddSids(NtApiDotNet.Sid,NtApiDotNet.Sid[])">
            <summary>
            Add a list of SIDs to the boundary descriptor. 
            </summary>
            <param name="sid">The first SID to add</param>
            <param name="sids">Additional SIDs</param>
        </member>
        <member name="P:NtApiDotNet.BoundaryDescriptor.Handle">
            <summary>
            The handle to the boundary descriptor. 
            </summary>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.CreateFromString(System.String)">
            <summary>
            Create a boundary descriptor from a string representation.
            </summary>
            <param name="descriptor">A boundary descriptor string of the form [SID[:SID...]@]NAME where SID is an SDDL format SID.</param>
            <returns>The new boundary descriptor.</returns>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:NtApiDotNet.BoundaryDescriptor.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtDirectory">
            <summary>
            NT Directory Object class
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.DirectoryAccessRights,System.Boolean)">
            <summary>
            Open a directory object
            </summary>
            <param name="obj_attributes">The object attributes to use for the open call.</param>
            <param name="desired_access">Access rights for directory object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error and throw_on_error is true.</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Open a directory object
            </summary>
            <param name="obj_attributes">The object attributes to use for the open call.</param>
            <param name="desired_access">Access rights for directory object</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Throw on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Open a directory object by name
            </summary>
            <param name="name">The directory object to open</param>
            <param name="root">Optional root directory to parse from</param>
            <param name="desired_access">Access rights for directory object</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Throw on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Open(System.String)">
            <summary>
            Open a directory object by full name
            </summary>
            <param name="name">The directory object to open</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Throw on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.DirectoryAccessRights,NtApiDotNet.NtDirectory,System.Boolean)">
            <summary>
            Create a directory object with a shadow
            </summary>
            <param name="obj_attributes">The object attributes to create the directory with</param>
            <param name="desired_access">The desired access to the directory</param>
            <param name="shadow_dir">The shadow directory</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error and throw_on_error is true.</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.DirectoryAccessRights,NtApiDotNet.NtDirectory)">
            <summary>
            Create a directory object with a shadow
            </summary>
            <param name="obj_attributes">The object attributes to create the directory with</param>
            <param name="desired_access">The desired access to the directory</param>
            <param name="shadow_dir">The shadow directory</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Create a directory object
            </summary>
            <param name="name">The directory object to create, if null will create a unnamed directory object</param>
            <param name="desired_access">The desired access to the directory</param>
            <param name="root">Root directory from where to start the creation operation</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.DirectoryAccessRights,NtApiDotNet.NtDirectory)">
            <summary>
            Create a directory object with a shadow
            </summary>
            <param name="name">The directory object to create, if null will create a unnamed directory object</param>
            <param name="desired_access">The desired access to the directory</param>
            <param name="root">Root directory from where to start the creation operation</param>
            <param name="shadow_dir">The shadow directory</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Create(System.String)">
            <summary>
            Create a directory object 
            </summary>
            <param name="name">The directory object to create, if null will create a unnamed directory object</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Query">
            <summary>
            Query the directory for a list of entries.
            </summary>
            <returns>The list of entries.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.VisitAccessibleDirectories(System.Func{NtApiDotNet.NtDirectory,System.Boolean},NtApiDotNet.DirectoryAccessRights,System.Boolean,System.Int32)">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
            <param name="desired_access">Specify the desired access for the directory</param>
            <param name="recurse">True to recurse into sub directories.</param>
            <param name="max_depth">Specify max recursive depth. -1 to not set a limit.</param>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.VisitAccessibleDirectories(System.Func{NtApiDotNet.NtDirectory,System.Boolean})">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.VisitAccessibleDirectories(System.Func{NtApiDotNet.NtDirectory,System.Boolean},System.Boolean)">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
            <param name="recurse">True to recurse into sub directories.</param>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.VisitAccessibleDirectories(System.Func{NtApiDotNet.NtDirectory,System.Boolean},NtApiDotNet.DirectoryAccessRights,System.Boolean)">
            <summary>
            Visit all accessible directories under this one.
            </summary>
            <param name="visitor">A function to be called on every accessible directory. Return true to continue enumeration.</param>
            <param name="desired_access">Specify the desired access for the directory</param>
            <param name="recurse">True to recurse into sub directories.</param>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenSessionDirectory(System.Int32,System.String,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Open a session directory.
            </summary>
            <param name="sessionid">The session ID to open</param>
            <param name="sub_directory">Sub directory to open.</param>
            <param name="desired_access">Desired access to open directory.</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenSessionDirectory(System.String)">
            <summary>
            Open the current session directory.
            </summary>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenSessionDirectory">
            <summary>
            Open the current session directory.
            </summary>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenBaseNamedObjects(System.Int32)">
            <summary>
            Open basenamedobjects for a session.
            </summary>
            <param name="sessionid">The session ID to open</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenBaseNamedObjects">
            <summary>
            Open basenamedobjects for current session.
            </summary>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetBasedNamedObjects(System.Int32)">
            <summary>
            Get the based named object's directory for a session.
            </summary>
            <param name="session_id">The session ID</param>
            <returns>The based named object's directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetBasedNamedObjects">
            <summary>
            Get the based named object's directory for the current session.
            </summary>
            <returns>The based named object's directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetWindows(System.Int32)">
            <summary>
            Get the a session's Windows object directory.
            </summary>
            <param name="session_id">The session id to use.</param>
            <returns>The path to the windows object directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetWindows">
            <summary>
            Get the current session's Windows object directory.
            </summary>
            <returns>The path to the windows object directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetWindowStations(System.Int32)">
            <summary>
            Get the a session's Window Stations object directory.
            </summary>
            <param name="session_id">The session id to use.</param>
            <returns>The path to the window stations object directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetWindowStations">
            <summary>
            Get the current session's Window Stations object directory.
            </summary>
            <returns>The path to the window stations object directory.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenDosDevicesDirectory(NtApiDotNet.NtToken)">
            <summary>
            Open dos devices directory for a token.
            </summary>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenDosDevicesDirectory">
            <summary>
            Open dos devices directory for current effective token.
            </summary>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.CreatePrivateNamespace(NtApiDotNet.ObjectAttributes,NtApiDotNet.BoundaryDescriptor,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Create a private namespace directory.
            </summary>
            <param name="obj_attributes">Object attributes for the directory</param>
            <param name="boundary_descriptor">Boundary descriptor for the namespace</param>
            <param name="desired_access">Desired access for the directory</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.CreatePrivateNamespace(NtApiDotNet.BoundaryDescriptor)">
            <summary>
            Create a private namespace directory.
            </summary>
            <param name="boundary_descriptor">Boundary descriptor for the namespace</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenPrivateNamespace(NtApiDotNet.ObjectAttributes,NtApiDotNet.BoundaryDescriptor,NtApiDotNet.DirectoryAccessRights)">
            <summary>
            Open a private namespace directory.
            </summary>
            <param name="obj_attributes">Object attributes for the directory</param>
            <param name="boundary_descriptor">Boundary descriptor for the namespace</param>
            <param name="desired_access">Desired access for the directory</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.OpenPrivateNamespace(NtApiDotNet.BoundaryDescriptor)">
            <summary>
            Open a private namespace directory.
            </summary>
            <param name="boundary_descriptor">Boundary descriptor for the namespace</param>
            <returns>The directory object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.Delete">
            <summary>
            Deletes a private namespace. If not a private namespace this does nothing.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetDirectoryEntry(System.String,System.String,System.Boolean)">
            <summary>
            Get a directory entry based on a name.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="typename">The typename to verify against, can be null.</param>
            <param name="case_sensitive">True if look up is case sensitive.</param>
            <returns>The directory entry, or null if it can't be found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetDirectoryEntry(System.String)">
            <summary>
            Get a directory entry based on a name.
            </summary>
            <param name="name">The name of the entry.</param>
            <returns>The directory entry, or null if it can't be found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.DirectoryExists(System.String,NtApiDotNet.NtDirectory)">
            <summary>
            Returns whether a directory exists for this path.
            </summary>
            <param name="path">The path to the entry.</param>
            <param name="root">The root directory.</param>
            <returns>True if the directory exists for the specified path.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.GetDirectoryEntryType(System.String,NtApiDotNet.NtObject)">
            <summary>
            Get the type of a directory entry by path.
            </summary>
            <param name="path">The path to the directory entry</param>
            <param name="root">The root object to look up if path is relative</param>
            <returns>The type name, or null if it can't be found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtDirectory.DirectoryExists(System.String)">
            <summary>
            Check whether a directory is exists relative to the current directory.
            </summary>
            <param name="relative_path">Relative path to directory</param>
            <returns>True if the directory exists.</returns>
        </member>
        <member name="T:NtApiDotNet.NtEvent">
            <summary>
            Class representing a NT Event object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Set">
            <summary>
            Set the event state
            </summary>
            <returns>The previous state of the event</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Clear">
            <summary>
            Clear the event state
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Pulse">
            <summary>
            Pulse the event state.
            </summary>
            <returns>The previous state of the event</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.EventType,System.Boolean)">
            <summary>
            Create an event object
            </summary>
            <param name="name">The path to the event</param>
            <param name="root">The root object for relative path names</param>
            <param name="type">The type of the even</param>
            <param name="initial_state">The initial state of the event</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.EventType,System.Boolean,NtApiDotNet.EventAccessRights)">
            <summary>
            Create an event object
            </summary>
            <param name="object_attributes">The event object attributes</param>
            <param name="type">The type of the event</param>
            <param name="initial_state">The initial state of the event</param>
            <param name="desired_access">The desired access for the event</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.EventType,System.Boolean,NtApiDotNet.EventAccessRights,System.Boolean)">
            <summary>
            Create an event object
            </summary>
            <param name="object_attributes">The event object attributes</param>
            <param name="type">The type of the event</param>
            <param name="initial_state">The initial state of the event</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Create(System.String,NtApiDotNet.EventType,System.Boolean)">
            <summary>
            Create an event object
            </summary>
            <param name="name">The path to the event</param>
            <param name="type">The type of the even</param>
            <param name="initial_state">The initial state of the event</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.EventAccessRights)">
            <summary>
            Open an event object
            </summary>
            <param name="name">The path to the event</param>
            <param name="root">The root object for relative path names</param>
            <param name="desired_access">The desired access for the event</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.EventAccessRights)">
            <summary>
            Open an event object
            </summary>
            <param name="object_attributes">The event object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <returns>The event object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.EventAccessRights,System.Boolean)">
            <summary>
            Open an event object
            </summary>
            <param name="object_attributes">The event object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open an event object
            </summary>
            <param name="name">The path to the event</param>
            <param name="root">The root object for relative path names</param>
            <returns>The event object</returns>
        </member>
        <member name="M:NtApiDotNet.NtEvent.Open(System.String)">
            <summary>
            Open an event object
            </summary>
            <param name="name">The path to the event</param>
            <returns>The event object</returns>
        </member>
        <member name="T:NtApiDotNet.NtException">
            <summary>
            Exception class representing an NT status error.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtException.#ctor(NtApiDotNet.NtStatus)">
            <summary>
            Constructor
            </summary>
            <param name="status">Status result</param>
        </member>
        <member name="P:NtApiDotNet.NtException.Status">
            <summary>
            Returns the contained NT status code
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtException.Message">
            <summary>
            Returns a string form of the NT status code.
            </summary>
        </member>
        <member name="P:NtApiDotNet.IoStatus.Information32">
            <summary>
            Return the status information field. (32 bit)
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown if not complete.</exception>
        </member>
        <member name="T:NtApiDotNet.NtIoControlCode">
            <summary>
            Represents a NT file IO control code.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtIoControlCode.DeviceType">
            <summary>
            Type of device
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtIoControlCode.Function">
            <summary>
            Function number
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtIoControlCode.Method">
            <summary>
            Buffering method
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtIoControlCode.Access">
            <summary>
            Access of file handle
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.#ctor(NtApiDotNet.FileDeviceType,System.Int32,NtApiDotNet.FileControlMethod,NtApiDotNet.FileControlAccess)">
            <summary>
            Constructor
            </summary>
            <param name="device_type">Type of device</param>
            <param name="function">Function number</param>
            <param name="method">Buffering method</param>
            <param name="access">Access of file handle</param>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="code">Raw IO control code to convert.</param>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.ToControlCode(System.Int32)">
            <summary>
            Static method to create an NtIoControlCode 
            </summary>
            <param name="code">The conde as an integer.</param>
            <returns>The io control code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoControlCode.ToInt32">
            <summary>
            Convert the io control code to an Int32
            </summary>
            <returns>The int32 version of the code</returns>
        </member>
        <member name="M:NtApiDotNet.ReparseBuffer.FromByteArray(System.Byte[],System.Boolean)">
            <summary>
            Get a reparse buffer from a byte array.
            </summary>
            <param name="ba">The byte array to parse</param>
            <param name="opaque_buffer">True to return an opaque buffer if 
            the tag isn't known, otherwise try and parse as a generic buffer</param>
            <returns>The reparse buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtAsyncResult.WaitForComplete">
            <summary>
            Wait for the result to complete. This could be waiting on an event
            or the file handle.
            </summary>
            <returns>Returns true if the wait completed successfully.</returns>
            <remarks>If true is returned then status and information can be read out.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtAsyncResult.WaitForCompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Wait for the result to complete asynchronously. This could be waiting on an event
            or the file handle.
            </summary>
            <param name="token">Cancellation token.</param>
            <returns>Returns true if the wait completed successfully.</returns>
            <remarks>If true is returned then status and information can be read out.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtAsyncResult.Information">
            <summary>
            Return the status information field.
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown if not complete.</exception>
        </member>
        <member name="P:NtApiDotNet.NtAsyncResult.Information32">
            <summary>
            Return the status information field. (32 bit)
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown if not complete.</exception>
        </member>
        <member name="P:NtApiDotNet.NtAsyncResult.Status">
            <summary>
            Get completion status code.
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown if not complete.</exception>
        </member>
        <member name="P:NtApiDotNet.NtAsyncResult.IsPending">
            <summary>
            Returns true if the call is pending.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAsyncResult.Dispose">
            <summary>
            Dispose object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAsyncResult.Reset">
            <summary>
            Reset the file result so it can be reused.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtAsyncResult.Cancel">
            <summary>
            Cancel the pending IO operation.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtFile">
            <summary>
            Class representing a NT File object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileAttributes,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer,System.Boolean)">
            <summary>
            Create a new file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="file_attributes">Attributes for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileAttributes,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer)">
            <summary>
            Create a new file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="file_attributes">Attributes for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <returns>The created/opened file object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileAttributes,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer)">
            <summary>
            Create a new file
            </summary>
            <param name="name">The path to the file</param>
            <param name="root">A root object to parse relative filenames</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="file_attributes">Attributes for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <returns>The created/opened file object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Create(System.String,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.EaBuffer)">
            <summary>
            Create a new file
            </summary>
            <param name="name">The path to the file</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="ea_buffer">Extended Attributes buffer</param>
            <returns>The created/opened file object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateNamedPipe(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.NamedPipeType,NtApiDotNet.NamedPipeReadMode,NtApiDotNet.NamedPipeCompletionMode,System.Int32,System.Int32,System.Int32,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Create a new named pipe file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="completion_mode">Pipe completion mode</param>
            <param name="default_timeout">Default timeout</param>
            <param name="input_quota">Input quota</param>
            <param name="maximum_instances">Maximum number of instances (-1 for infinite)</param>
            <param name="output_quota">Output quota</param>
            <param name="pipe_type">Type of pipe to create</param>
            <param name="read_mode">Pipe read mode</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateNamedPipe(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.NamedPipeType,NtApiDotNet.NamedPipeReadMode,NtApiDotNet.NamedPipeCompletionMode,System.Int32,System.Int32,System.Int32,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Create a new named pipe file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="completion_mode">Pipe completion mode</param>
            <param name="default_timeout">Default timeout</param>
            <param name="input_quota">Input quota</param>
            <param name="maximum_instances">Maximum number of instances (-1 for infinite)</param>
            <param name="output_quota">Output quota</param>
            <param name="pipe_type">Type of pipe to create</param>
            <param name="read_mode">Pipe read mode</param>
            <returns>The file instance for the pipe.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateNamedPipe(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,NtApiDotNet.FileDisposition,NtApiDotNet.NamedPipeType,NtApiDotNet.NamedPipeReadMode,NtApiDotNet.NamedPipeCompletionMode,System.Int32,System.Int32,System.Int32,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Create a new named pipe file
            </summary>
            <param name="name">The path to the pipe file</param>
            <param name="root">A root object to parse relative filenames</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="share_access">Share access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="disposition">Disposition when opening the file</param>
            <param name="completion_mode">Pipe completion mode</param>
            <param name="default_timeout">Default timeout</param>
            <param name="input_quota">Input quota</param>
            <param name="maximum_instances">Maximum number of instances (-1 for infinite)</param>
            <param name="output_quota">Output quota</param>
            <param name="pipe_type">Type of pipe to create</param>
            <param name="read_mode">Pipe read mode</param>
            <returns>The file instance for the pipe.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateMailslot(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileOpenOptions,System.Int32,System.Int32,System.Int64)">
            <summary>
            Create a new named mailslot file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="mailslot_quota">Mailslot quota</param>
            <param name="maximum_message_size">Maximum message size (0 for any size)</param>
            <param name="default_timeout">Timeout in MS ( &lt;0 is infinite)</param>
            <returns>The file instance for the mailslot.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateMailslot(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileOpenOptions,System.Int32,System.Int32,System.Int64)">
            <summary>
            Create a new named mailslot file
            </summary>
            <param name="name">The path to the mailslot file</param>
            <param name="root">A root object to parse relative filenames</param>
            <param name="desired_access">Desired access for the file</param>
            <param name="open_options">Open options for file</param>
            <param name="mailslot_quota">Mailslot quota</param>
            <param name="maximum_message_size">Maximum message size (0 for any size)</param>
            <param name="default_timeout">Timeout in MS ( &lt;0 is infinite)</param>
            <returns>The file instance for the mailslot.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer,System.Threading.CancellationToken)">
            <summary>
            Send a Device IO Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a Device IO Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer,System.Threading.CancellationToken)">
            <summary>
            Send a File System Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a File System Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <param name="token">Cancellation token to cancel the async operation.</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Send a Device IO Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32)">
            <summary>
            Send a Device IO Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Send a File System Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControlAsync(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32)">
            <summary>
            Send a File System Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControl(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Send a Device IO Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <returns>The length of output bytes returned.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeviceIoControl(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32)">
            <summary>
            Send a Device IO Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControl(NtApiDotNet.NtIoControlCode,System.Runtime.InteropServices.SafeBuffer,System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Send an File System Control code to the file driver
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="output_buffer">Output buffer can be null</param>
            <returns>The length of output bytes returned.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.FsControl(NtApiDotNet.NtIoControlCode,System.Byte[],System.Int32)">
            <summary>
            Send a File System Control code to the file driver.
            </summary>
            <param name="control_code">The control code</param>
            <param name="input_buffer">Input buffer can be null</param>
            <param name="max_output">Maximum output buffer size</param>
            <returns>The output buffer returned by the kernel.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,System.Boolean)">
            <summary>
            Open a file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the file handle</param>
            <param name="share_access">The file share access</param>
            <param name="open_options">File open options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Open a file
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the file handle</param>
            <param name="share_access">The file share access</param>
            <param name="open_options">File open options</param>
            <returns>The opened file</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Open a file
            </summary>
            <param name="path">The path to the file</param>
            <param name="root">The root directory if path is relative.</param>
            <param name="desired_access">The desired access for the file handle</param>
            <param name="shared_access">The file share access</param>
            <param name="open_options">File open options</param>
            <returns>The opened file</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.FileAccessRights)">
            <summary>
            Open a file
            </summary>
            <param name="path">The path to the file</param>
            <param name="root">The root directory if path is relative.</param>
            <param name="desired_access">The desired access for the file handle</param>
            <returns>The opened file</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReOpen(NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,System.Boolean)">
            <summary>
            Re-open an existing file for different access.
            </summary>
            <param name="desired_access">The desired access for the file handle</param>
            <param name="share_access">The file share access</param>
            <param name="open_options">File open options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReOpen(NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Re-open an exsiting file for different access.
            </summary>
            <param name="desired_access">The desired access for the file handle</param>
            <param name="share_access">The file share access</param>
            <param name="open_options">File open options</param>
            <returns>The opened file</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtFile.FileId">
            <summary>
            Get object ID for current file
            </summary>
            <returns>The object ID as a string</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtFile.FileAttributes">
            <summary>
            Get the attributes of a file.
            </summary>
            <returns>The file attributes</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtFile.IsDirectory">
            <summary>
            Get whether this file represents a directory.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.IsReparsePoint">
            <summary>
            Get whether this file repsents a reparse point.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.OpenResult">
            <summary>
            The result of opening the file, whether it was created, overwritten etc.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetFileId(System.String)">
            <summary>
            Get the object ID of a file as a string
            </summary>
            <param name="path">The path to the file</param>
            <returns>The object ID as a string</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.OpenFileById(NtApiDotNet.NtFile,System.String,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions,System.Boolean)">
            <summary>
            Open a file by its object ID
            </summary>
            <param name="volume">A handle to the volume on which the file resides.</param>
            <param name="id">The object ID as a binary string</param>
            <param name="desired_access">The desired access for the file</param>
            <param name="share_access">File share access</param>
            <param name="open_options">Open options.</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The opened file object</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.OpenFileById(NtApiDotNet.NtFile,System.String,NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Open a file by its object ID
            </summary>
            <param name="volume">A handle to the volume on which the file resides.</param>
            <param name="id">The object ID as a binary string</param>
            <param name="desired_access">The desired access for the file</param>
            <param name="share_access">File share access</param>
            <param name="open_options">Open options.</param>
            <returns>The opened file object</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Delete">
            <summary>
            Delete the file. Must have been opened with DELETE access.
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Delete(NtApiDotNet.ObjectAttributes,System.Boolean)">
            <summary>
            Delete a file
            </summary>
            <param name="obj_attributes">The object attributes for the file.</param>
            <param name="throw_on_error">True to throw an exception on error</param>
            <returns>The status result of the delete</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Delete(NtApiDotNet.ObjectAttributes)">
            <summary>
            Delete a file
            </summary>
            <param name="obj_attributes">The object attributes for the file.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.Delete(System.String)">
            <summary>
            Delete a file
            </summary>
            <param name="path">The path to the file.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeleteEx(NtApiDotNet.FileDispositionInformationExFlags)">
            <summary>
            Delete the file (extended Windows version). Must have been opened with DELETE access.
            </summary>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateHardlink(System.String,NtApiDotNet.NtFile)">
            <summary>
            Create a new hardlink to this file.
            </summary>
            <param name="linkname">The target NT path.</param>
            <param name="root">The root directory if linkname is relative</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateHardlink(System.String)">
            <summary>
            Create a new hardlink to this file.
            </summary>
            <param name="linkname">The target absolute NT path.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateHardlink(System.String,System.String)">
            <summary>
            Create a hardlink to another file.
            </summary>
            <param name="path">The file to hardlink to.</param>
            <param name="linkname">The desintation hardlink path.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String,NtApiDotNet.NtFile,System.Boolean)">
            <summary>
            Rename file.
            </summary>
            <param name="new_name">The target NT path.</param>
            <param name="root">The root directory if new_name is relative</param>
            <param name="replace_if_exists">If TRUE, replaces the target file if it exists. If FALSE, fails if the target file already exists.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String,NtApiDotNet.NtFile)">
            <summary>
            Rename file.
            </summary>
            <param name="new_name">The target NT path.</param>
            <param name="root">The root directory if new_name is relative</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String,System.Boolean)">
            <summary>
            Rename this file with an absolute path.
            </summary>
            <param name="new_name">The target absolute NT path.</param>
            <param name="replace_if_exists">If TRUE, replace the target file if it exists. If FALSE, fails if the target file already exists.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String)">
            <summary>
            Rename this file with an absolute path.
            </summary>
            <param name="new_name">The target absolute NT path.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.Rename(System.String,System.String)">
            <summary>
            Rename file.
            </summary>
            <param name="path">The file to rename.</param>
            <param name="new_name">The target NT path.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.RenameEx(System.String,NtApiDotNet.FileRenameInformationExFlags)">
            <summary>
            Rename (extended Windows version) this file with an absolute path.
            </summary>
            <param name="new_name">The target absolute NT path.</param>
            <param name="flags">The flags associated to FileRenameInformationEx.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetReparsePoint(NtApiDotNet.ReparseBuffer)">
            <summary>
            Set an arbitrary reparse point.
            </summary>
            <param name="reparse">The reparse point data.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetMountPoint(System.String,System.String)">
            <summary>
            Set a mount point on the current file object.
            </summary>
            <param name="substitute_name">The substitute name to reparse to.</param>
            <param name="print_name">The print name to display (can be null).</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetSymlink(System.String,System.String,NtApiDotNet.SymlinkReparseBufferFlags)">
            <summary>
            Set a symlink on the current file object.
            </summary>
            <param name="substitute_name">The substitute name to reparse to.</param>
            <param name="print_name">The print name to display.</param>
            <param name="flags">Additional flags for the symlink.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateMountPoint(System.String,System.String,System.String)">
            <summary>
            Create a mount point.
            </summary>
            <param name="path">The path to the mount point to create.</param>
            <param name="substitute_name">The substitute name to reparse to.</param>
            <param name="print_name">The print name to display (can be null).</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.CreateSymlink(System.String,System.Boolean,System.String,System.String,NtApiDotNet.SymlinkReparseBufferFlags)">
            <summary>
            Create a symlink.
            </summary>
            <param name="path">The path to the mount point to create.</param>
            <param name="directory">True to create a directory symlink, false for a file.</param>
            <param name="substitute_name">The substitute name to reparse to.</param>
            <param name="print_name">The print name to display.</param>
            <param name="flags">Additional flags for the symlink.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetReparsePoint(System.Boolean)">
            <summary>
            Get the reparse point buffer for the file.
            </summary>
            <param name="opaque_buffer">If the reparse tag isn't known 
            return an opaque buffer, otherwise a generic buffer</param>
            <returns>The reparse point buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetReparsePoint">
            <summary>
            Get the reparse point buffer for the file.
            </summary>
            <returns>The reparse point buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetReparsePoint(System.String)">
            <summary>
            Get the reparse point buffer for the file.
            </summary>
            <param name="path">The path to the reparse point.</param>
            <returns>The reparse point buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeleteReparsePoint">
            <summary>
            Delete the reparse point buffer
            </summary>
            <returns>The original reparse buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.DeleteReparsePoint(System.String)">
            <summary>
            Delete the reparse point buffer.
            </summary>
            <param name="path">The path to the reparse point.</param>
            <returns>The original reparse buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.QueryAccessibleFiles(NtApiDotNet.FileAccessRights,NtApiDotNet.FileShareMode,NtApiDotNet.FileOpenOptions)">
            <summary>
            Get list of accessible files underneath a directory.
            </summary>
            <param name="share_access">Share access for file open</param>
            <param name="open_options">Options for open call.</param>
            <param name="desired_access">The desired access for each file.</param>
            <returns>The list of files which can be access.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.QueryDirectoryInfo">
            <summary>
            Query a directory for files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.QueryDirectoryInfo(System.String,NtApiDotNet.FileTypeMask)">
            <summary>
            Query a directory for files.
            </summary>
            <param name="file_mask">A file name mask (such as *.txt). Can be null.</param>
            <param name="type_mask">Indicate what entries to return.</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Read(System.Int32,System.Int64)">
            <summary>
            Read data from a file with a length and position.
            </summary>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read</param>
            <returns>The read bytes, this can be smaller than length.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Read(System.Int32)">
            <summary>
            Read data from a file with a length.
            </summary>
            <param name="length">The length of the read</param>
            <returns>The read bytes, this can be smaller than length.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadAsync(System.Int32,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Read data from a file with a length and position.
            </summary>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The read bytes, this can be smaller than length.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.ReadAsync(System.Int32,System.Int64)">
            <summary>
            Read data from a file with a length and position.
            </summary>
            <param name="length">The length of the read</param>
            <param name="position">The position in the file to read</param>
            <returns>The read bytes, this can be smaller than length.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Write(System.Byte[],System.Int64)">
            <summary>
            Write data to a file at a specific position.
            </summary>
            <param name="data">The data to write</param>
            <param name="position">The position to write to</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Write(System.Byte[])">
            <summary>
            Write data to a file
            </summary>
            <param name="data">The data to write</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteAsync(System.Byte[],System.Int64)">
            <summary>
            Write data to a file at a specific position asynchronously.
            </summary>
            <param name="data">The data to write</param>
            <param name="position">The position to write to</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.WriteAsync(System.Byte[],System.Int64,System.Threading.CancellationToken)">
            <summary>
            Write data to a file at a specific position asynchronously.
            </summary>
            <param name="data">The data to write.</param>
            <param name="position">The position to write to.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.Lock(System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Lock part of a file.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
            <param name="fail_immediately">True to fail immediately if the lock can't be taken</param>
            <param name="exclusive">True to do an exclusive lock</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.Lock(System.Int64,System.Int64)">
            <summary>
            Shared lock part of a file.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.LockAsync(System.Int64,System.Int64,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Lock part of a file asynchronously.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
            <param name="fail_immediately">True to fail immediately if the lock can't be taken</param>
            <param name="exclusive">True to do an exclusive lock</param>
            <param name="token">Cancellation token to cancel async operation.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.LockAsync(System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Lock part of a file asynchronously.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
            <param name="fail_immediately">True to fail immediately if the lock can't be taken</param>
            <param name="exclusive">True to do an exclusive lock</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.LockAsync(System.Int64,System.Int64)">
            <summary>
            Shared lock part of a file asynchronously.
            </summary>
            <param name="offset">The offset into the file to lock</param>
            <param name="size">The number of bytes to lock</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.Unlock(System.Int64,System.Int64)">
            <summary>
            Unlock part of a file previously locked with Lock
            </summary>
            <param name="offset">The offset into the file to unlock</param>
            <param name="size">The number of bytes to unlock</param>
        </member>
        <member name="P:NtApiDotNet.NtFile.Position">
            <summary>
            Get or set the current file position.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.Length">
            <summary>
            Get or sets the file's length
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFile.ToStream">
            <summary>
            Convert this NtFile to a FileStream for reading/writing.
            </summary>
            <remarks>The stream must be closed separately from the NtFile.</remarks>
            <returns>The file stream.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtFile.Win32PathName">
            <summary>
            Get the Win32 path name for the file.
            </summary>
            <returns>The path, String.Empty on error.</returns>
        </member>
        <member name="P:NtApiDotNet.NtFile.DeviceType">
            <summary>
            Get the low-level device type of the file.
            </summary>
            <returns>The file device type.</returns>
        </member>
        <member name="P:NtApiDotNet.NtFile.Characteristics">
            <summary>
            Get the low-level device characteristics of the file.
            </summary>
            <returns>The file device characteristics.</returns>
        </member>
        <member name="P:NtApiDotNet.NtFile.FileName">
            <summary>
            Get the filename with the volume path.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.FileShortName">
            <summary>
            Get the associated short filename
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.FullPath">
            <summary>
            Get the name of the file.
            </summary>
            <returns>The name of the file.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplock(NtApiDotNet.OplockRequestLevel)">
            <summary>
            Oplock the file with a specific level.
            </summary>
            <param name="level">The level of oplock to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockAsync(NtApiDotNet.OplockRequestLevel,System.Threading.CancellationToken)">
            <summary>
            Oplock the file with a specific level.
            </summary>
            <param name="level">The level of oplock to set.</param>
            <param name="token">Cancellation token to cancel async operation.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.RequestOplockAsync(NtApiDotNet.OplockRequestLevel)">
            <summary>
            Oplock the file with a specific level.
            </summary>
            <param name="level">The level of oplock to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.OplockExclusive">
            <summary>
            Oplock the file exclusively (no other users can access the file).
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFile.OplockExclusiveAsync(System.Threading.CancellationToken)">
            <summary>
            Oplock the file exclusively (no other users can access the file).
            </summary>
            <param name="token">Cancellation token to cancel async operation.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.OplockExclusiveAsync">
            <summary>
            Oplock the file exclusively (no other users can access the file).
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFile.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">True is disposing.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.CancelIo">
            <summary>
            Try and cancel any pending asynchronous IO.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetEa">
            <summary>
            Get the extended attributes of a file.
            </summary>
            <returns>The extended attributes, empty if no extended attributes.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetEa(NtApiDotNet.EaBuffer)">
            <summary>
            Set the extended attributes for a file.
            </summary>
            <param name="ea">The EA buffer to set.</param>
            <remarks>This will add entries if they no longer exist, 
            remove entries if the data is empty or update existing entires.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetEa(System.String,System.Byte[],NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Set the extended attributes for a file.
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.AddEntry(System.String,System.Int32,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Set the extended attributes for a file.
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetEa(System.String,System.String,NtApiDotNet.EaBufferEntryFlags)">
            <summary>
            Set the extended attributes for a file.
            </summary>
            <param name="name">The name of the entry</param>
            <param name="data">The associated data</param>
            <param name="flags">The entry flags.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.RemoveEa(System.String)">
            <summary>
            Remove an extended attributes entry for a file.
            </summary>
            <param name="name">The name of the entry</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetCompletionPort(NtApiDotNet.NtIoCompletion,System.IntPtr)">
            <summary>
            Assign completion port to file.
            </summary>
            <param name="completion_port">The completion port.</param>
            <param name="key">A key to associate with this completion.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.IsAccessGranted(NtApiDotNet.FileDirectoryAccessRights)">
            <summary>
            Check if a specific set of file directory access rights is granted
            </summary>
            <param name="access">The file directory access rights to check</param>
            <returns>True if all access rights are granted</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetCachedSigningLevel">
            <summary>
            Get the cached signing level for a file.
            </summary>
            <returns>The cached signing level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetCachedSigningLevel(System.Int32,NtApiDotNet.SigningLevel,System.String)">
            <summary>
            Set the cached signing level for a file.
            </summary>
            <param name="flags">Flags to set for the cache.</param>
            <param name="signing_level">The signing level to cache</param>
            <param name="name">Optional name for the cache.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetCachedSigningLevel(System.Int32,NtApiDotNet.SigningLevel,System.Collections.Generic.IEnumerable{NtApiDotNet.NtFile},System.String)">
            <summary>
            Set the cached signing level for a file.
            </summary>
            <param name="flags">Flags to set for the cache.</param>
            <param name="signing_level">The signing level to cache</param>
            <param name="files">Files for signature.</param>
            <param name="name">Optional name for the cache.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetEndOfFile(System.Int64)">
            <summary>
            Set the end of file.
            </summary>
            <param name="offset">The offset to the end of file.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.SetValidDataLength(System.Int64)">
            <summary>
            Set the valid data length of the file without zeroing. Needs SeManageVolumePrivilege.
            </summary>
            <param name="length">The length to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetHardLinks">
            <summary>
            Get list of hard link entries for a file.
            </summary>
            <returns>The list of entries.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetStreams">
            <summary>
            Get a list of stream entries for the current file.
            </summary>
            <returns>The list of streams.</returns>
        </member>
        <member name="P:NtApiDotNet.NtFile.Mode">
            <summary>
            Get the file mode.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtFile.Access">
            <summary>
            Get file access information.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFile.GetUsingProcessIds">
            <summary>
            Get list of process ids using this file.
            </summary>
            <returns>The list of process ids.</returns>
        </member>
        <member name="P:NtApiDotNet.NtFile.IsRemote">
            <summary>
            Gets whether the file is on a remote file system.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtFileUtils">
            <summary>
            Utility functions for files
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.DosFileNameToNt(System.String)">
            <summary>
            Convert a DOS filename to an absolute NT filename
            </summary>
            <param name="filename">The filename, can be relative</param>
            <returns>The NT filename</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.DosFileNameToObjectAttributes(System.String)">
            <summary>
            Convert a DOS filename to an NT filename and get as an ObjectAttributes structure
            </summary>
            <param name="filename">The filename</param>
            <returns>The object attributes</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.DosFileNameToUnicodeString(System.String)">
            <summary>
            Convert a DOS filename to a UNICODE_STRING structure
            </summary>
            <param name="filename">The DOS filename</param>
            <returns>The UNICODE_STRING</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.GetDosPathType(System.String)">
            <summary>
            Get type of DOS path
            </summary>
            <param name="filename">The DOS filename</param>
            <returns>The type of DOS path</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.MapToFileAccess(NtApiDotNet.FileDirectoryAccessRights)">
            <summary>
            Map directory access rights to file access rights.
            </summary>
            <param name="access_rights">The directory access rights to map.</param>
            <returns>The mapped access rights.</returns>
        </member>
        <member name="M:NtApiDotNet.NtFileUtils.FileIdToString(System.Int64)">
            <summary>
            Convert a file ID long to a string.
            </summary>
            <param name="fileid">The file ID to convert</param>
            <returns>The string format of the file id.</returns>
        </member>
        <member name="T:NtApiDotNet.NtIoCompletion">
            <summary>
            Class representing an NT IO Completion Port object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.IoCompletionAccessRights,System.Int32,System.Boolean)">
            <summary>
            Create an IO Completion Port object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="concurrent_threads">Number of concurrent threads to process I/O packets. 0 for CPU count.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.IoCompletionAccessRights,System.Int32)">
            <summary>
            Create an IO Completion Port object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="concurrent_threads">Number of concurrent threads to process I/O packets. 0 for CPU count.</param>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.IoCompletionAccessRights,System.Int32)">
            <summary>
            Create an IO Completion Port object
            </summary>
            <param name="name">The path to the IO Completion Port</param>
            <param name="root">The root object for relative path names</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="concurrent_threads">Number of concurrent threads to process I/O packets. 0 for CPU count.</param>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Create">
            <summary>
            Create an unnamed IO Completion Port object.
            </summary>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.IoCompletionAccessRights)">
            <summary>
            Open an IO Completion Port object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.IoCompletionAccessRights,System.Boolean)">
            <summary>
            Open an IO Completion Port object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access for the event</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.IoCompletionAccessRights)">
            <summary>
            Open an IO Completion Port object
            </summary>
            <param name="name">The path to the IO Completion Port</param>
            <param name="root">The root object for relative path names</param>
            <param name="desired_access">The desired access for the event</param>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Open(System.String)">
            <summary>
            Open an IO Completion Port object
            </summary>
            <param name="name">The path to the IO Completion Port</param>
            <returns>The IO Completion Port object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Remove(NtApiDotNet.NtWaitTimeout)">
            <summary>
            Remove a queued status from the queue.
            </summary>
            <param name="timeout">An optional timeout.</param>
            <returns>The completion result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error or timeout.</exception>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Remove(System.Int32,NtApiDotNet.NtWaitTimeout,System.Boolean)">
            <summary>
            Remove multiple queued status from the queue.
            </summary>
            <param name="max_count">Maximum number of status to remove.</param>
            <param name="timeout">An optional timeout.</param>
            <param name="alertable">Indicate whether the wait is alertable.</param>
            <returns>Array of completion results. Length can be &lt;= max_count. If timeout then returns an empty array.</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Remove(System.Int32)">
            <summary>
            Remove multiple queued status from the queue.
            </summary>
            <param name="max_count">Maximum number of status to remove.</param>
            <returns>Array of completion results. Length can be &lt;= max_count</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Remove">
            <summary>
            Remove a queued status from the queue. Wait for an infinite time for the result.
            </summary>
            <returns>The completion result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtIoCompletion.Set(System.IntPtr,System.IntPtr,NtApiDotNet.NtStatus,System.IntPtr)">
            <summary>
            Add a queued status to the queue.
            </summary>
            <param name="key_context">The optional key context.</param>
            <param name="apc_context">The optional APC context.</param>
            <param name="status">Status code</param>
            <param name="information">The information context.</param>
        </member>
        <member name="P:NtApiDotNet.NtIoCompletion.Depth">
            <summary>
            Get current depth of IO Completion Port
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtJob">
            <summary>
            Class representing a NT Job object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtJob.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.JobAccessRights,System.Boolean)">
            <summary>
            Create a job object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for job.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.JobAccessRights)">
            <summary>
            Create a job object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for job.</param>
            <returns>The Job object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.JobAccessRights)">
            <summary>
            Create a job object
            </summary>
            <param name="path">The path to the job object (can be null)</param>
            <param name="root">The root object when path is relative</param>
            <param name="desired_access">Desired access for job.</param>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Create(System.String,NtApiDotNet.NtObject)">
            <summary>
            Create a job object
            </summary>
            <param name="path">The path to the job object (can be null)</param>
            <param name="root">The root object when path is relative</param>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Create">
            <summary>
            Create an unnamed job object
            </summary>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.CreateSilo">
            <summary>
            Convert Job object into a Silo
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtJob.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.JobAccessRights,System.Boolean)">
            <summary>
            Open a job object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for job.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.JobAccessRights)">
            <summary>
            Open a job object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for job.</param>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.JobAccessRights)">
            <summary>
            Open a job object
            </summary>
            <param name="path">The path to the job object</param>
            <param name="root">The root object when path is relative</param>
            <param name="desired_access">Desired access for the job object</param>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open a job object
            </summary>
            <param name="path">The path to the job object</param>
            <param name="root">The root object when path is relative</param>
            <returns>The Job object</returns>
        </member>
        <member name="M:NtApiDotNet.NtJob.AssignProcess(NtApiDotNet.NtProcess)">
            <summary>
            Assign a process to this job object.
            </summary>
            <param name="process">The process to assign.</param>
        </member>
        <member name="M:NtApiDotNet.NtJob.AssociateCompletionPort(NtApiDotNet.NtIoCompletion,System.IntPtr)">
            <summary>
            Associate a completion port with the job.
            </summary>
            <param name="port">The completion port.</param>
            <param name="key">The key associated with the port.</param>
        </member>
        <member name="P:NtApiDotNet.NtJob.CompletionFilter">
            <summary>
            Get or set completion filter for job object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtJob.Terminate(NtApiDotNet.NtStatus)">
            <summary>
            Terminate this job object.
            </summary>
            <param name="status">The termination status.</param>
        </member>
        <member name="T:NtApiDotNet.NtKeyValue">
            <summary>
            Class representing a single Key value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKeyValue.Name">
            <summary>
            Name of the value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKeyValue.Type">
            <summary>
            Type of the value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKeyValue.Data">
            <summary>
            Raw data for the value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKeyValue.TitleIndex">
            <summary>
            Title index for the value
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtKeyValue.ToString">
            <summary>
            Convert the value to a string
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:NtApiDotNet.NtKeyValue.ToObject">
            <summary>
            Convert value to an object
            </summary>
            <returns>The value as an object</returns>
        </member>
        <member name="T:NtApiDotNet.NtKey">
            <summary>
            Class to represent an NT Key object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtKey.LoadKey(System.String,System.String,NtApiDotNet.LoadKeyFlags)">
            <summary>
            Load a new hive
            </summary>
            <param name="destination">The destination path</param>
            <param name="filename">The path to the hive</param>
            <param name="flags">Load flags</param>
            <returns>The opened root key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.LoadKey(NtApiDotNet.ObjectAttributes,NtApiDotNet.ObjectAttributes,NtApiDotNet.LoadKeyFlags,NtApiDotNet.KeyAccessRights)">
            <summary>
            Load a new hive
            </summary>
            <param name="key_obj_attr">Object attributes for the key name</param>
            <param name="file_obj_attr">Object attributes for the path to the hive file</param>
            <param name="flags">Load flags</param>
            <param name="desired_access">Desired access for the root key</param>
            <returns>The opened root key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.LoadKey(NtApiDotNet.ObjectAttributes,NtApiDotNet.ObjectAttributes,NtApiDotNet.LoadKeyFlags,NtApiDotNet.KeyAccessRights,System.Boolean)">
            <summary>
            Load a new hive
            </summary>
            <param name="key_obj_attr">Object attributes for the key name</param>
            <param name="file_obj_attr">Object attributes for the path to the hive file</param>
            <param name="flags">Load flags</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.UnloadKey(NtApiDotNet.ObjectAttributes,NtApiDotNet.UnloadKeyFlags,System.Boolean)">
            <summary>
            Unload an existing hive.
            </summary>
            <param name="key_obj_attr">Object attributes for the key name</param>
            <param name="flags">Unload flags</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.UnloadKey(System.String,NtApiDotNet.UnloadKeyFlags)">
            <summary>
            Unload an existing hive.
            </summary>
            <param name="key">Path to key to unload.</param>
            <param name="flags">Unload flags</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.UnloadKey(System.String)">
            <summary>
            Unload an existing hive.
            </summary>
            <param name="key">Path to key to unload.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions,System.Boolean)">
            <summary>
            Create a new Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="options">Create options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions)">
            <summary>
            Create a new Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="options">Create options</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions)">
            <summary>
            Create a new Key
            </summary>
            <param name="key_name">Path to the key to create</param>
            <param name="root">Root key if key_name is relative</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="options">Create options</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(System.String)">
            <summary>
            Create a new Key
            </summary>
            <param name="key_name">Path to the key to create</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Create(System.String,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions)">
            <summary>
            Create a new Key
            </summary>
            <param name="key_name">Path to the key to create</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="options">Create options</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions,System.Boolean)">
            <summary>
            Try and open a Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="open_options">Open options.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions)">
            <summary>
            Open a Key
            </summary>
            <param name="obj_attributes">Object attributes for the key name</param>
            <param name="desired_access">Desired access for the root key</param>
            <param name="open_options">Open options.</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.KeyAccessRights)">
            <summary>
            Open a Key
            </summary>
            <param name="key_name">Path to the key to open</param>
            <param name="root">Root key if key_name is relative</param>
            <param name="desired_access">Desired access for the root key</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Delete">
            <summary>
            Delete the key
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,NtApiDotNet.RegistryValueType,System.Byte[])">
            <summary>
            Set a resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="type">The type of the value</param>
            <param name="data">The raw value data</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,NtApiDotNet.RegistryValueType,System.String)">
            <summary>
            Set a string resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="type">The type of the value</param>
            <param name="data">The value data</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,System.UInt32)">
            <summary>
            Set a DWORD resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="data">The value data</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetValue(System.String,System.UInt64)">
            <summary>
            Set a QWORD resistry value
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="data">The value data</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.DeleteValue(System.String)">
            <summary>
            Delete a registry value
            </summary>
            <param name="value_name">The name of the value</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryValue(System.String,System.Boolean)">
            <summary>
            Query a value by name
            </summary>
            <param name="value_name">The name of the value</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The value information</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryValue(System.String)">
            <summary>
            Query a value by name
            </summary>
            <param name="value_name">The name of the value</param>
            <returns>The value information</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryValues">
            <summary>
            Query all values for this key
            </summary>
            <returns>A list of values</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryLicenseValue(System.String,System.Boolean)">
            <summary>
            Query a license value. While technically not directly a registry key
            it has many of the same properties such as using the same registry
            value types.
            </summary>
            <param name="name">The name of the license value.</param>
            <param name="throw_on_error">True to throw an exception on error</param>
            <returns>The license value key</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryLicenseValue(System.String)">
            <summary>
            Query a license value. While technically not directly a registry key
            it has many of the same properties such as using the same registry
            value types.
            </summary>
            <param name="name">The name of the license value.</param>
            <returns>The license value key</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryKeys">
            <summary>
            Query all subkey names
            </summary>
            <returns>The list of subkey names</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryAccessibleKeys(NtApiDotNet.KeyAccessRights,System.Boolean,System.Boolean)">
            <summary>
            Return a list of subkeys which can be accessed.
            </summary>
            <param name="desired_access">The required access rights for the subkeys</param>
            <param name="open_link">True to open link keys rather than following the link.</param>
            <param name="open_for_backup">True to open keys with backup flag set.</param>
            <returns>The disposable list of subkeys.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.QueryAccessibleKeys(NtApiDotNet.KeyAccessRights)">
            <summary>
            Return a list of subkeys which can be accessed.
            </summary>
            <param name="desired_access">The required access rights for the subkeys</param>
            <returns>The disposable list of subkeys.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.SetSymbolicLinkTarget(System.String)">
            <summary>
            Set a symbolic link target for this key (must have been created with
            appropriate create flags)
            </summary>
            <param name="target">The symbolic link target.</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.CreateSymbolicLink(System.String,NtApiDotNet.NtKey,System.String)">
            <summary>
            Create a registry key symbolic link
            </summary>
            <param name="rootkey">Root key if path is relative</param>
            <param name="path">Path to the key to create</param>
            <param name="target">Target resistry path</param>
            <returns>The created symbolic link key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(System.String)">
            <summary>
            Open a key
            </summary>
            <param name="key_name">The path to the key to open</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.Open(System.String,NtApiDotNet.KeyAccessRights)">
            <summary>
            Open a key
            </summary>
            <param name="key_name">The path to the key to open</param>
            <param name="desired_access">Access rights for the key</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.ReOpen(NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions,System.Boolean)">
            <summary>
            Reopen the key with different access rights.
            </summary>
            <param name="desired_access">The access rights to reopen with.</param>
            <param name="options">Open options.</param>
            <param name="throw_on_error">True to thow on error.</param>
            <returns>The opened key.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.ReOpen(NtApiDotNet.KeyAccessRights,NtApiDotNet.KeyCreateOptions)">
            <summary>
            Reopen the key with different access rights.
            </summary>
            <param name="desired_access">The access rights to reopen with.</param>
            <param name="options">Open options.</param>
            <returns>The opened key.</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.GetMachineKey">
            <summary>
            Open the machine key
            </summary>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.GetUserKey">
            <summary>
            Open the user key
            </summary>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.GetUserKey(NtApiDotNet.Sid)">
            <summary>
            Open a specific user key
            </summary>
            <param name="sid">The SID fo the user to open</param>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.GetCurrentUserKey">
            <summary>
            Open the current user key
            </summary>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.GetRootKey">
            <summary>
            Open the root key
            </summary>
            <returns>The opened key</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.ToRegistryKey">
            <summary>
            Convert object to a .NET RegistryKey object
            </summary>
            <returns>The registry key object</returns>
        </member>
        <member name="M:NtApiDotNet.NtKey.Rename(System.String)">
            <summary>
            Rename key.
            </summary>
            <param name="new_name">The new name for the key.</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Save(NtApiDotNet.NtFile,NtApiDotNet.SaveKeyFlags)">
            <summary>
            Save the opened key into a file.
            </summary>
            <param name="file">The file to save to.</param>
            <param name="flags">Save key flags</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Save(System.String,NtApiDotNet.SaveKeyFlags)">
            <summary>
            Save the opened key into a file.
            </summary>
            <param name="path">The file path to save to.</param>
            <param name="flags">Save key flags</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Save(System.String)">
            <summary>
            Save the opened key into a file.
            </summary>
            <param name="path">The file path to save to.</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Restore(NtApiDotNet.NtFile,NtApiDotNet.RestoreKeyFlags)">
            <summary>
            Restore key from a file.
            </summary>
            <param name="file">The file to restore from</param>
            <param name="flags">Restore key flags</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Restore(System.String,NtApiDotNet.RestoreKeyFlags)">
            <summary>
            Restore key from a file.
            </summary>
            <param name="path">The file path to restore from</param>
            <param name="flags">Restore key flags</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Restore(System.String)">
            <summary>
            Restore key from a file.
            </summary>
            <param name="path">The file path to restore from</param>
        </member>
        <member name="M:NtApiDotNet.NtKey.Lock">
            <summary>
            Try and lock the registry key to prevent further modification.
            </summary>
            <remarks>Note that this almost certainly never works from usermode, there's an explicit
            check to prevent it in the kernel.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtKey.NotifyChange(NtApiDotNet.NotifyCompletionFilter,System.Boolean)">
            <summary>
            Wait for a change on thie registry key.
            </summary>
            <param name="completion_filter">Specify what changes will be notified.</param>
            <param name="watch_tree">True to watch the entire tree.</param>
            <returns>The status from the change notification.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKey.NotifyChangeAsync(NtApiDotNet.NotifyCompletionFilter,System.Boolean)">
            <summary>
            Wait for a change on thie registry key asynchronously.
            </summary>
            <param name="completion_filter">Specify what changes will be notified.</param>
            <param name="watch_tree">True to watch the entire tree.</param>
            <returns>The status from the change notification.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.LastWriteTime">
            <summary>
            Get key last write time
            </summary>
            <returns>The last write time</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.SubKeyCount">
            <summary>
            Get key subkey count
            </summary>
            <returns>The subkey count</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.ValueCount">
            <summary>
            Get key value count
            </summary>
            <returns>The key value count</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.TitleIndex">
            <summary>
            Get the key title index
            </summary>
            <returns>The key title index</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.ClassName">
            <summary>
            Get the key class name
            </summary>
            <returns>The key class name</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.MaxValueNameLength">
            <summary>
            Get the maximum key value name length
            </summary>
            <returns>The maximum key value name length</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.MaxValueDataLength">
            <summary>
            Get the maximum key value data length
            </summary>
            <returns>The maximum key value data length</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.MaxNameLength">
            <summary>
            Get the maximum subkey name length
            </summary>
            <returns>The maximum subkey name length</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.MaxClassLength">
            <summary>
            Get the maximum class name length
            </summary>
            <returns>The maximum class name length</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtKey.Win32Path">
            <summary>
            Get the key path as a Win32 style one. If not possible returns
            the original path.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.Disposition">
            <summary>
            The disposition when the key was created.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.VirtualizationFlags">
            <summary>
            Get or set virtualization flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.ControlFlags">
            <summary>
            Get or set key control flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtKey.Wow64Flags">
            <summary>
            Get or set wow64 flags.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtKeyUtils">
            <summary>
            Utilities for registry keys.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtKeyUtils.Win32KeyNameToNt(System.String)">
            <summary>
            Convert a Win32 style keyname such as HKEY_LOCAL_MACHINE\Path into a native key path.
            </summary>
            <param name="path">The win32 style keyname to convert.</param>
            <returns>The converted keyname.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if invalid name.</exception>
        </member>
        <member name="M:NtApiDotNet.NtKeyUtils.NtKeyNameToWin32(System.String)">
            <summary>
            Attempt to convert an NT style registry key name to Win32 form.
            If it's not possible to convert the function will return the 
            original form.
            </summary>
            <param name="nt_path">The NT path to convert.</param>
            <returns>The converted path, or original if it can't be converted.</returns>
        </member>
        <member name="T:NtApiDotNet.NtLocale">
            <summary>
            Class to access NT locale information
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtLocale.GetNlsSectionPtr(NtApiDotNet.NlsSectionType,System.Int32)">
            <summary>
            Get mapped NLS section
            </summary>
            <param name="type">The type of section</param>
            <param name="codepage">The codepage number</param>
            <returns>The mapped section if it exists.</returns>
        </member>
        <member name="M:NtApiDotNet.NtLocale.GetDefaultLocal(System.Boolean)">
            <summary>
            Get default locale ID
            </summary>
            <param name="thread">True if the locale should be the thread's, otherwise the systems</param>
            <returns>The locale ID</returns>
        </member>
        <member name="M:NtApiDotNet.NtLocale.SetDefaultLocale(System.Boolean,System.UInt32)">
            <summary>
            Set default locale
            </summary>
            <param name="thread">True if the locale should be the thread's, otherwise the systems</param>
            <param name="locale">The locale ID</param>
        </member>
        <member name="T:NtApiDotNet.NtMutant">
            <summary>
            Class representing a NT Mutant object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Create(System.String,NtApiDotNet.NtObject,System.Boolean)">
            <summary>
            Create a new mutant
            </summary>
            <param name="path">The path to the mutant</param>
            <param name="root">The root object if path is relative</param>
            <param name="initial_owner">True to set current thread as initial owner</param>
            <returns>The opened mutant</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Create(NtApiDotNet.ObjectAttributes,System.Boolean,NtApiDotNet.MutantAccessRights)">
            <summary>
            Create a new mutant
            </summary>
            <param name="object_attributes">Object attributes</param>
            <param name="initial_owner">True to set current thread as initial owner</param>
            <param name="desired_access">Desired access for mutant</param>
            <returns>The opened mutant</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Create(NtApiDotNet.ObjectAttributes,System.Boolean,NtApiDotNet.MutantAccessRights,System.Boolean)">
            <summary>
            Create a new mutant
            </summary>
            <param name="object_attributes">Object attributes</param>
            <param name="initial_owner">True to set current thread as initial owner</param>
            <param name="desired_access">Desired access for mutant</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.MutantAccessRights)">
            <summary>
            Open a mutant
            </summary>
            <param name="path">The path to the mutant</param>
            <param name="root">The root object if path is relative</param>
            <param name="desired_access">Desired access for mutant</param>
            <returns>The opened mutant</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open a mutant
            </summary>
            <param name="path">The path to the mutant</param>
            <param name="root">The root object if path is relative</param>
            <returns>The opened mutant</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.MutantAccessRights)">
            <summary>
            Open a mutant
            </summary>
            <param name="object_attributes">Object attributes</param>
            <param name="desired_access">Desired access for mutant</param>
            <returns>The opened mutant</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.MutantAccessRights,System.Boolean)">
            <summary>
            Open a mutant
            </summary>
            <param name="object_attributes">Object attributes</param>
            <param name="desired_access">Desired access for mutant</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtMutant.Release">
            <summary>
            Release the mutant
            </summary>
            <returns>The previous release count</returns>
        </member>
        <member name="T:NtApiDotNet.NtRegistryTransaction">
            <summary>
            Class to represent a registry transaction object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.RegistryTransactionAccessRights,System.Boolean)">
            <summary>
            Create a transaction
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.RegistryTransactionAccessRights)">
            <summary>
            Create a transaction
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the handle</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Create(System.String,NtApiDotNet.NtObject)">
            <summary>
            Create a transaction
            </summary>
            <param name="path">The path of the transaction</param>
            <param name="root">The root if path is relative</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Create(System.String)">
            <summary>
            Create a transaction
            </summary>
            <param name="path">The path of the transaction</param>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Create">
            <summary>
            Create a transaction
            </summary>
            <returns>The opened transaction</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.RegistryTransactionAccessRights)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.RegistryTransactionAccessRights,System.Boolean)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.RegistryTransactionAccessRights)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Open(System.String)">
            <summary>
            Open a transaction object.
            </summary>
            <param name="path">The path to the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Commit">
            <summary>
            Commit the transaction
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtRegistryTransaction.Rollback">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="T:NtApiDotNet.SemaphoreAccessRights">
            <summary>
            Semaphore access rights.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtSemaphore">
            <summary>
            Class to represent a NT Semaphore object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SemaphoreAccessRights,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a semaphore object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="initial_count">Initial count for semaphore</param>
            <param name="maximum_count">Maximum count for semaphore</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SemaphoreAccessRights,System.Int32,System.Int32)">
            <summary>
            Create a semaphore object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="initial_count">Initial count for semaphore</param>
            <param name="maximum_count">Maximum count for semaphore</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Create(System.String,NtApiDotNet.NtObject,System.Int32,System.Int32)">
            <summary>
            Create a semaphore object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="initial_count">Initial count for semaphore</param>
            /// <param name="maximum_count">Maximum count for semaphore</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SemaphoreAccessRights,System.Boolean)">
            <summary>
            Open a semaphore object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SemaphoreAccessRights)">
            <summary>
            Open a semaphore object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.SemaphoreAccessRights)">
            <summary>
            Open a semaphore object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSemaphore.Release(System.Int32)">
            <summary>
            Release the semaphore
            </summary>
            <param name="count">The release count</param>
            <returns>The previous count</returns>
        </member>
        <member name="T:NtApiDotNet.NtSession">
            <summary>
            Class to represent a Session object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSession.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SessionAccessRights,System.Boolean)">
            <summary>
            Open a session object.
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the object</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The open result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSession.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SessionAccessRights)">
            <summary>
            Open a session object.
            </summary>
            <param name="obj_attributes">The object attributes</param>
            <param name="desired_access">Desired access for the object</param>
            <returns>The open result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSession.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.SessionAccessRights)">
            <summary>
            Open a session object.
            </summary>
            <param name="name">Name of the object</param>
            <param name="root">Optional root directory for lookup</param>
            <param name="desired_access">Desired access for the object</param>
            <returns>The open result.</returns>
        </member>
        <member name="T:NtApiDotNet.NtSymbolicLink">
            <summary>
            Class representing a NT SymbolicLink object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.SymbolicLinkAccessRights,System.String)">
            <summary>
            Create a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="target">The target path</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SymbolicLinkAccessRights,System.String,System.Boolean)">
            <summary>
            Create a symbolic link object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="target">The target path</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SymbolicLinkAccessRights,System.String)">
            <summary>
            Create a symbolic link object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="target">The target path</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Create(System.String,NtApiDotNet.NtObject,System.String)">
            <summary>
            Create a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="target">The target path</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Create(System.String,System.String)">
            <summary>
            Create a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="target">The target path</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.SymbolicLinkAccessRights)">
            <summary>
            Open a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SymbolicLinkAccessRights,System.Boolean)">
            <summary>
            Open a symbolic link object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SymbolicLinkAccessRights)">
            <summary>
            Open a symbolic link object.
            </summary>
            <param name="object_attributes">The object attributes for the object</param>
            <param name="desired_access">The desired access for the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <param name="root">The root if path is relative</param>
            <returns>The opened object</returns>
        </member>
        <member name="M:NtApiDotNet.NtSymbolicLink.Open(System.String)">
            <summary>
            Open a symbolic link object.
            </summary>
            <param name="path">The path to the object</param>
            <returns>The opened object</returns>
        </member>
        <member name="P:NtApiDotNet.NtSymbolicLink.Target">
            <summary>
            Get the symbolic link target.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtHandle">
            <summary>
            Class to represent a system handle
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.ProcessId">
            <summary>
            The ID of the process holding the handle
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.ObjectTypeIndex">
            <summary>
            The object type index
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.ObjectType">
            <summary>
            The object type name
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.NtType">
            <summary>
            The object type
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.Attributes">
            <summary>
            The handle attribute flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.Handle">
            <summary>
            The handle value
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.Object">
            <summary>
            The address of the object.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.GrantedAccess">
            <summary>
            The granted access mask
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.Name">
            <summary>
            The name of the object (needs to have set query access in constructor)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtHandle.SecurityDescriptor">
            <summary>
            The security of the object  (needs to have set query access in constructor)
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtHandle.GetObject">
            <summary>
            Get handle into the current process
            </summary>
            <returns>The handle to the object</returns>
        </member>
        <member name="T:NtApiDotNet.NtSystemInfo">
            <summary>
            Class to access some NT system information
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetHandles(System.Int32,System.Boolean)">
            <summary>
            Get a list of handles
            </summary>
            <param name="pid">A process ID to filter on. If -1 will get all handles</param>
            <param name="allow_query">True to allow the handles returned to query for certain properties</param>
            <returns>The list of handles</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetHandles">
            <summary>
            Get a list of all handles
            </summary>
            <returns>The list of handles</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetThreadInformation(System.Int32)">
            <summary>
            Get a list of threads for a specific process.
            </summary>
            <returns>The list of thread information.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetProcessInformation">
            <summary>
            Get all process information for the system.
            </summary>
            <returns>The list of process information.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.GetPageFileNames">
            <summary>
            Get list of page filenames.
            </summary>
            <returns>The list of page file names.</returns>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.KernelDebuggerEnabled">
            <summary>
            Get whether the kernel debugger is enabled.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.KernelDebuggerNotPresent">
            <summary>
            Get whether the kernel debugger is not present.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.CodeIntegrityOptions">
            <summary>
            Get current code integrity option settings.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.CodeIntegrityPolicy">
            <summary>
            Get code integrity policy.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.CodeIntegrityUnlock">
            <summary>
            Get code integrity unlock information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.CodeIntegrityFullPolicy">
            <summary>
            Get all code integrity policies.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.CreateKernelDump(System.String,NtApiDotNet.SystemDebugKernelDumpControlFlags,NtApiDotNet.SystemDebugKernelDumpPageControlFlags)">
            <summary>
            Create a kernel dump for current system.
            </summary>
            <param name="path">The path to the output file.</param>
            <param name="flags">Flags</param>
            <param name="page_flags">Page flags</param>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.SecureBootEnabled">
            <summary>
            Get whether secure boot is enabled.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.SecureBootCapable">
            <summary>
            Get whether system supports secure boot.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtSystemInfo.SecureBootPolicy">
            <summary>
            Extract the secure boot policy.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QuerySystemEnvironmentValueNames">
            <summary>
            Query all system environment value names.
            </summary>
            <returns>A list of names of environment values</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QuerySystemEnvironmentValueNamesAndValues">
            <summary>
            Query all system environment value names and values.
            </summary>
            <returns>A list of names of environment values</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QuerySystemEnvironmentValue(System.String,System.Guid,System.Boolean)">
            <summary>
            Query a single system environment value.
            </summary>
            <param name="name">The name of the value.</param>
            <param name="vendor_guid">The associated vendor guid</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The system environment value.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.QuerySystemEnvironmentValue(System.String,System.Guid)">
            <summary>
            Query a single system environment value.
            </summary>
            <param name="name">The name of the value.</param>
            <param name="vendor_guid">The associated vendor guid</param>
            <returns>The system environment value.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetSystemEnvironmentValue(System.String,System.Guid,System.Byte[],System.Int32)">
            <summary>
            Set a system environment variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="vendor_guid">The vendor GUID</param>
            <param name="value">The value to set</param>
            <param name="attributes">Attributes of the value</param>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.SetSystemEnvironmentValue(System.String,System.Guid,System.String,System.Int32)">
            <summary>
            Set a system environment variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="vendor_guid">The vendor GUID</param>
            <param name="value">The value to set</param>
            <param name="attributes">Attributes of the value</param>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.AllocateLocallyUniqueId">
            <summary>
            Allocate a LUID.
            </summary>
            <returns>The allocated LUID.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.ResolveObjectAddress(System.Collections.Generic.IEnumerable{NtApiDotNet.NtObject})">
            <summary>
            Get the addresses of a list of objects from the handle table and initialize the Address property.
            </summary>
            <param name="objects">The list of objects to initialize.</param>
        </member>
        <member name="M:NtApiDotNet.NtSystemInfo.ResolveObjectAddress(NtApiDotNet.NtObject)">
            <summary>
            Get the address of an object in kernel memory from the handle table and initialize the Address property.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:NtApiDotNet.GenericAccessRights">
            <summary>
            Generic access rights.
            </summary>
        </member>
        <member name="T:NtApiDotNet.DuplicateObjectOptions">
            <summary>
            Options for duplicating objects.
            </summary>
        </member>
        <member name="F:NtApiDotNet.DuplicateObjectOptions.CloseSource">
            <summary>
            Close the original handle.
            </summary>
        </member>
        <member name="F:NtApiDotNet.DuplicateObjectOptions.SameAccess">
            <summary>
            Duplicate with the same access.
            </summary>
        </member>
        <member name="F:NtApiDotNet.DuplicateObjectOptions.SameAttributes">
            <summary>
            Duplicate with the same handle attributes.
            </summary>
        </member>
        <member name="T:NtApiDotNet.ObjectInformationClass">
            <summary>
            Information class for NtQueryObject
            </summary>
            <see cref="M:NtApiDotNet.NtSystemCalls.NtQueryObject(System.Runtime.InteropServices.SafeHandle,NtApiDotNet.ObjectInformationClass,System.Runtime.InteropServices.SafeBuffer,System.Int32,System.Int32@)"/>
        </member>
        <member name="T:NtApiDotNet.ObjectNameInformation">
            <summary>
            Structure to return Object Name
            </summary>
        </member>
        <member name="T:NtApiDotNet.ObjectBasicInformation">
            <summary>
            Structure to return Object basic information
            </summary>
        </member>
        <member name="T:NtApiDotNet.PoolType">
            <summary>
            Type of kernel pool used for object allocation
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtObject">
            <summary>
            Base class for all NtObject types we handle
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.QueryBasicInformation(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Get the basic information for the object.
            </summary>
            <returns>The basic information</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.#ctor(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Base constructor
            </summary>
            <param name="handle">Handle to the object</param>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.NtProcess,NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.NtProcess,NtApiDotNet.AccessMask,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate the internal handle to a new handle.
            </summary>
            <param name="flags">Attribute flags for new handle</param>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="src_process">The source process to duplicate from</param>
            <param name="dest_process">The desination process for the handle</param>
            <param name="options">Duplicate handle options</param>
            <param name="access_rights">The access rights for the new handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.NtProcess,NtApiDotNet.AccessMask,NtApiDotNet.DuplicateObjectOptions)">
            <summary>
            Duplicate the internal handle to a new handle.
            </summary>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="dest_process">The desination process for the handle</param>
            <param name="options">Duplicate handle options</param>
            <param name="access_rights">The access rights for the new handle</param>
            <returns>The duplicated handle.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.NtProcess)">
            <summary>
            Duplicate a handle from the current process to a new handle with the same access rights.
            </summary>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="dest_process">The desination process for the handle</param>
            <returns>The duplicated handle.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Duplicate a handle from and to the current process to a new handle with the same access rights.
            </summary>
            <param name="src_handle">The source handle to duplicate</param>
            <returns>The duplicated handle.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateHandle(NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.AccessMask)">
            <summary>
            Duplicate a handle from and to the current process to a new handle with new access rights.
            </summary>
            <param name="src_handle">The source handle to duplicate</param>
            <param name="access_rights">The access for the new handle.</param>
            <returns>The duplicated handle.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateObject(NtApiDotNet.AccessMask,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate object.
            </summary>
            <param name="access_rights">Access rights to duplicate with.</param>
            <param name="flags">Attribute flags.</param>
            <param name="options">Duplicate options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateObject(NtApiDotNet.AccessMask)">
            <summary>
            Duplicate object with specific access rights.
            </summary>
            <param name="access_rights">Access rights to duplicate with.</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateObject">
            <summary>
            Duplicate object with sane access rights.
            </summary>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.DuplicateAsWaitHandle">
            <summary>
            Duplicate the object handle as a WaitHandle.
            </summary>
            <returns>The wait handle.</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.FullPath">
            <summary>
            Get full path to the object
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.GrantedAccessMask">
            <summary>
            Get the granted access as an unsigned integer
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.IsAccessMaskGranted(NtApiDotNet.AccessMask)">
            <summary>
            Check if access is granted to a set of rights
            </summary>
            <param name="access">The access rights to check</param>
            <returns>True if all the access rights are granted</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSecurityDescriptorBytes(NtApiDotNet.SecurityInformation)">
            <summary>
            Get security descriptor as a byte array
            </summary>
            <param name="security_information">What parts of the security descriptor to retrieve</param>
            <returns>The security descriptor</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSecurityDescriptorBytes(NtApiDotNet.SecurityInformation,System.Boolean)">
            <summary>
            Get security descriptor as a byte array
            </summary>
            <param name="security_information">What parts of the security descriptor to retrieve</param>
            <param name="throw_on_error">True to throw on error.</param>
            <return>The NT status result and security descriptor.</return>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSecurityDescriptorBytes">
            <summary>
            Get security descriptor as a byte array
            </summary>
            <returns>Returns an array of bytes for the security descriptor</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.SetSecurityDescriptor(System.Byte[],NtApiDotNet.SecurityInformation)">
            <summary>
            Set the object's security descriptor
            </summary>
            <param name="security_desc">The security descriptor to set.</param>
            <param name="security_information">What parts of the security descriptor to set</param>
        </member>
        <member name="M:NtApiDotNet.NtObject.SetSecurityDescriptor(System.Byte[],NtApiDotNet.SecurityInformation,System.Boolean)">
            <summary>
            Set the object's security descriptor
            </summary>
            <param name="security_desc">The security descriptor to set.</param>
            <param name="security_information">What parts of the security descriptor to set</param>
            <param name="throw_on_error">True to throw on error.</param>
            <return>The NT status result.</return>
        </member>
        <member name="M:NtApiDotNet.NtObject.SetSecurityDescriptor(NtApiDotNet.SecurityDescriptor,NtApiDotNet.SecurityInformation)">
            <summary>
            Set the object's security descriptor
            </summary>
            <param name="security_desc">The security descriptor to set.</param>
            <param name="security_information">What parts of the security descriptor to set</param>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSecurityDescriptor(NtApiDotNet.SecurityInformation)">
            <summary>
            Get the security descriptor specifying which parts to retrieve
            </summary>
            <param name="security_information">What parts of the security descriptor to retrieve</param>
            <returns>The security descriptor</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSecurityDescriptor(NtApiDotNet.SecurityInformation,System.Boolean)">
            <summary>
            Get the security descriptor specifying which parts to retrieve
            </summary>
            <param name="security_information">What parts of the security descriptor to retrieve</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The security descriptor</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.SecurityDescriptor">
            <summary>
            Get the security descriptor, with Dacl, Owner, Group and Label
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.GetSddl">
            <summary>
            Get the security descriptor as an SDDL string
            </summary>
            <returns>The security descriptor as an SDDL string</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.Sddl">
            <summary>
            Get the security descriptor as an SDDL string
            </summary>
            <returns>The security descriptor as an SDDL string</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.Handle">
            <summary>
            The low-level handle to the object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.MakeTemporary">
            <summary>
            Make the object a temporary object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.MakePermanent">
            <summary>
            Make the object a permanent object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.Wait(System.Boolean,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Wait on the object to become signalled
            </summary>
            <param name="alertable">True to make the wait alertable</param>
            <param name="timeout">The time out</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.Wait(NtApiDotNet.NtWaitTimeout)">
            <summary>
            Wait on the object to become signalled
            </summary>
            <param name="timeout">The time out</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.Wait(System.Boolean,System.Int32)">
            <summary>
            Wait on the object to become signalled
            </summary>
            <param name="alertable">True to make the wait alertable</param>
            <param name="timeout_sec">The time out in seconds</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.Wait(System.Int32)">
            <summary>
            Wait on the object to become signalled
            </summary>
            <param name="timeout_sec">The time out in seconds</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.Wait">
            <summary>
            Wait on the object to become signalled for an infinite time.
            </summary>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtObject.CanOpenType(System.String)">
            <summary>
            Indicates whether a specific type of kernel object can be opened.
            </summary>
            <param name="typename">The kernel typename to check.</param>
            <returns>True if this type of object can be opened.</returns>        
        </member>
        <member name="M:NtApiDotNet.NtObject.OpenWithType(System.String,System.String,NtApiDotNet.NtObject,NtApiDotNet.AccessMask)">
            <summary>
            Open an NT object with a specified type.
            </summary>
            <param name="typename">The name of the type to open (e.g. Event). If null the method will try and lookup the appropriate type.</param>
            <param name="path">The path to the object to open.</param>
            <param name="root">A root directory to open from.</param>
            <param name="access">Generic access rights to the object.</param>
            <returns>The opened object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred opening the object.</exception>
            <exception cref="T:System.ArgumentException">Thrown if type of resource couldn't be found.</exception>
        </member>
        <member name="P:NtApiDotNet.NtObject.NtTypeName">
            <summary>
            Get the NT type name for this object.
            </summary>
            <returns>The NT type name.</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.NtType">
            <summary>
            Get the NtType for this object.
            </summary>
            <returns>The NtType for the type name</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GrantedAccessAsString(System.Boolean)">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <param name="map_to_generic">True to try and convert to generic rights where possible.</param>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtObject.GrantedAccessAsString">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.Name">
            <summary>
            Get the name of the object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.ToString">
            <summary>
            Convert to a string
            </summary>
            <returns>The string form of the object</returns>
        </member>
        <member name="P:NtApiDotNet.NtObject.CanSynchronize">
            <summary>
            Indicates if the handle can be used for synchronization.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.CreationTime">
            <summary>
            Get object creation time.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.Inherit">
            <summary>
            Get or set whether the handle is inheritable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.ProtectFromClose">
            <summary>
            Get or set whether the handle is protected from closing.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtObject.Address">
            <summary>
            Get the object's address is kernel memory.
            </summary>
            <remarks>As getting the address is expensive you need to pass the object to NtSystemInfo::ResolveObjectAddress to intialize.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtObject.Dispose(System.Boolean)">
            <summary>
            Virtual Dispose method.
            </summary>
            <param name="disposing">True if disposing, false if finalizing</param>
        </member>
        <member name="M:NtApiDotNet.NtObject.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObject.Close">
            <summary>
            Close handle
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtObjectWithDuplicate`2">
            <summary>
            A derived class to add some useful functions such as Duplicate
            </summary>
            <typeparam name="O">The derived type to use as return values</typeparam>
            <typeparam name="A">An enum which represents the access mask values for the type</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.ReOpen(`1,NtApiDotNet.AttributeFlags,System.Boolean)">
            <summary>
            Reopen object with different access rights.
            </summary>
            <param name="desired_access">The desired access.</param>
            <param name="attributes">Additional attributes for open.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.ReOpen(`1,System.Boolean)">
            <summary>
            Reopen object with different access rights.
            </summary>
            <param name="desired_access">The desired access.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.ReOpen(`1)">
            <summary>
            Reopen object with different access rights.
            </summary>
            <param name="desired_access">The desired access.</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateObject(NtApiDotNet.AccessMask,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate object.
            </summary>
            <param name="access_rights">Access rights to duplicate with.</param>
            <param name="flags">Attribute flags.</param>
            <param name="options">Duplicate options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.Duplicate(`1,NtApiDotNet.AttributeFlags,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate object.
            </summary>
            <param name="access_rights">Access rights to duplicate with.</param>
            <param name="flags">Attribute flags.</param>
            <param name="options">Duplicate options</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.Duplicate(`1)">
            <summary>
            Duplicate the object with specific access rights
            </summary>
            <param name="access">The access rights for the new handle</param>
            <returns>The duplicated object</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.Duplicate">
            <summary>
            Duplicate the object with same access rights
            </summary>
            <returns>The duplicated object</returns>
        </member>
        <member name="P:NtApiDotNet.NtObjectWithDuplicate`2.GrantedAccess">
            <summary>
            Get granted access for handle.
            </summary>
            <returns>Granted access</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.GetMaximumAccess(NtApiDotNet.NtToken)">
            <summary>
            Get the maximum permission access for this object based on a token
            and it's security descriptor.
            </summary>
            <param name="token">The token to check against.</param>
            <returns>Returns 0 if can't read the security descriptor.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.GetMaximumAccess">
            <summary>
            Get the maximum permission access for this object based on the current token
            and its security descriptor.
            </summary>
            <returns>Returns 0 if can't read the security descriptor.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.IsAccessGranted(`1)">
            <summary>
            Check if a specific set of access rights is granted
            </summary>
            <param name="access">The access rights to check</param>
            <returns>True if all access rights are granted</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.FromHandle(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Create a new instance from a kernel handle
            </summary>
            <param name="handle">The kernel handle</param>
            <returns>The new typed instance</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(NtApiDotNet.NtProcess,System.IntPtr,`1,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate an instance from a process
            </summary>
            <param name="process">The process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(System.Int32,System.IntPtr,`1,NtApiDotNet.DuplicateObjectOptions,System.Boolean)">
            <summary>
            Duplicate an instance from a process
            </summary>
            <param name="pid">The process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <param name="options">The options for duplication.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(NtApiDotNet.NtProcess,System.IntPtr,`1)">
            <summary>
            Duplicate an instance from a process with a specified access rights.
            </summary>
            <param name="process">The process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate.</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(System.Int32,System.IntPtr,`1)">
            <summary>
            Duplicate an instance from a process
            </summary>
            <param name="pid">The process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <param name="access">The access rights to duplicate with</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(NtApiDotNet.NtProcess,System.IntPtr)">
            <summary>
            Duplicate an instance from a process with same access rights.
            </summary>
            <param name="process">The process (with DupHandle access)</param>
            <param name="handle">The handle value to duplicate</param>
            <returns>The duplicated object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectWithDuplicate`2.DuplicateFrom(System.Int32,System.IntPtr)">
            <summary>
            Duplicate an instance from a process with same access rights
            </summary>
            <param name="pid">The process ID</param>
            <param name="handle">The handle value to duplicate</param>
            <returns>The duplicated handle</returns>
        </member>
        <member name="T:NtApiDotNet.NtGeneric">
            <summary>
            A generic wrapper for any object, used if we don't know the type ahead of time.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtGeneric.ToTypedObject">
            <summary>
            Convert the generic object to the best typed object.
            </summary>
            <returns>The typed object. Can be NtGeneric if no better type is known.</returns>
        </member>
        <member name="T:NtApiDotNet.NtResult`1">
            <summary>
            A structure to return the result of an NT system call with status.
            This allows a function to return both a status code and a result
            without having to resort to out parameters.
            </summary>
            <typeparam name="T">The result type.</typeparam>
        </member>
        <member name="P:NtApiDotNet.NtResult`1.Status">
            <summary>
            The NT status code.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtResult`1.Result">
            <summary>
            The result of the NT call.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtResult`1.GetResultOrThrow">
            <summary>
            Get the result object or throw an exception if status code is an error.
            </summary>
            <returns>The result NT result.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if status code is an error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtResult`1.IsSuccess">
            <summary>
            Is the result successful.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtResult`1.Map``1(System.Func{`0,``0})">
            <summary>
            Map result to a different type.
            </summary>
            <typeparam name="S">The different type to map to.</typeparam>
            <param name="map_func">A function to map the result.</param>
            <returns>The mapped result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResult`1.Cast``1">
            <summary>
            Cast result to a different type.
            </summary>
            <typeparam name="S">The different type to cast to.</typeparam>
            <returns>The mapped result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtResult`1.Dispose">
            <summary>
            Dispose result.
            </summary>
        </member>
        <member name="T:NtApiDotNet.PartialPeb">
            <summary>
            Partial definition of the PEB
            </summary>
        </member>
        <member name="T:NtApiDotNet.PartialPeb32">
            <summary>
            Partial definition of the PEB
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtProcess">
            <summary>
            Class representing a NT Process object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetProcesses(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Gets all accessible processes on the system.
            </summary>
            <param name="desired_access">The access desired for each process.</param>
            <returns>The list of accessible processes.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetProcesses(NtApiDotNet.ProcessAccessRights,System.Boolean)">
            <summary>
            Gets all accessible processes on the system.
            </summary>
            <param name="desired_access">The access desired for each process.</param>
            <param name="from_system_info">True to get processes from system information rather than NtGetNextProcess</param>
            <returns>The list of accessible processes.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetSessionProcesses(System.Int32,NtApiDotNet.ProcessAccessRights)">
            <summary>
            Gets all accessible processes on the system in a particular session.
            </summary>
            <param name="session_id">The session ID.</param>
            <param name="desired_access">The access desired for each process.</param>
            <returns>The list of accessible processes.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetSessionProcesses(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Gets all accessible processes on the system in the current session session.
            </summary>
            <param name="desired_access">The access desired for each process.</param>
            <returns>The list of accessible processes.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetFirstProcess(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Get first accessible process (used in combination with GetNextProcess)
            </summary>
            <param name="desired_access">The access required for the process.</param>
            <returns>The accessible process, or null if one couldn't be opened.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetNextProcess(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Get next accessible process (used in combination with GetFirstProcess)
            </summary>
            <param name="desired_access">The access required for the process.</param>
            <returns>The accessible process, or null if one couldn't be opened.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetFirstThread(NtApiDotNet.ThreadAccessRights)">
            <summary>
            Get first accessible thread for process.
            </summary>
            <param name="desired_access">The desired access for the thread.</param>
            <returns>The first thread object, or null if not accessible threads.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetFirstThread">
            <summary>
            Get first accessible thread for process.
            </summary>
            <returns>The first thread object, or null if not accessible threads.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetThreads(NtApiDotNet.ThreadAccessRights)">
            <summary>
            Get accessible threads for a process.
            </summary>
            <param name="desired_access">The desired access for the threads</param>
            <returns>The list of threads</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetThreads">
            <summary>
            Get accessible threads for a process.
            </summary>
            <returns>The list of threads</returns>
        </member>
        <member name="P:NtApiDotNet.NtProcess.SessionId">
            <summary>
            Get the process' session ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ProcessId">
            <summary>
            Get the process' ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ParentProcessId">
            <summary>
            Get the process' parent process ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.PebAddress">
            <summary>
            Get the memory address of the PEB
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ImageBaseAddress">
            <summary>
            Get the base address of the process from the PEB.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ExitStatus">
            <summary>
            Get the process' exit status.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.CommandLine">
            <summary>
            Get the process' command line
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Open(System.Int32,NtApiDotNet.ProcessAccessRights,System.Boolean)">
            <summary>
            Open a process
            </summary>
            <param name="pid">The process ID to open</param>
            <param name="desired_access">The desired access for the handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Open(System.Int32,NtApiDotNet.ProcessAccessRights)">
            <summary>
            Open a process
            </summary>
            <param name="pid">The process ID to open</param>
            <param name="desired_access">The desired access for the handle</param>
            <returns>The opened process</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.CreateProcessEx(NtApiDotNet.NtProcess,NtApiDotNet.ProcessCreateFlags,NtApiDotNet.NtSection)">
            <summary>
            Create a new process
            </summary>
            <param name="ParentProcess">The parent process</param>
            <param name="Flags">Creation flags</param>
            <param name="SectionHandle">Handle to the executable image section</param>
            <returns>The created process</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.CreateProcessEx(NtApiDotNet.ProcessCreateFlags,NtApiDotNet.NtSection)">
            <summary>
            Create a new process
            </summary>
            <param name="Flags">Creation flags</param>
            <param name="SectionHandle">Handle to the executable image section</param>
            <returns>The created process</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.CreateProcessEx(NtApiDotNet.NtSection)">
            <summary>
            Create a new process
            </summary>
            <param name="SectionHandle">Handle to the executable image section</param>
            <returns>The created process</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Terminate(NtApiDotNet.NtStatus)">
            <summary>
            Terminate the process
            </summary>
            <param name="exitcode">The exit code for the termination</param>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetImageFilePath(System.Boolean)">
            <summary>
            Get process image file path
            </summary>
            <param name="native">True to return the native image path, false for a Win32 style path</param>
            <returns>The process image file path</returns>
        </member>
        <member name="P:NtApiDotNet.NtProcess.FullPath">
            <summary>
            Get full image path name in native format
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetProcessMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy)">
            <summary>
            Get a mitigation policy raw value
            </summary>
            <param name="policy">The policy to get</param>
            <returns>The raw policy value</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetProcessMitigationPolicy(NtApiDotNet.ProcessMitigationPolicy,System.Int32)">
            <summary>
            Set a mitigation policy raw value
            </summary>
            <param name="policy">The policy to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:NtApiDotNet.NtProcess.DisableDynamicCodePolicy">
            <summary>
            Disable dynamic code policy on another process.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Suspend">
            <summary>
            Suspend the entire process.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.Resume">
            <summary>
            Resume the entire process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.DepStatus">
            <summary>
            Get process DEP status
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenToken">
            <summary>
            Open the process' token
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetToken(NtApiDotNet.NtToken)">
            <summary>
            Set process access token. Process must be have not been started.
            </summary>
            <param name="token">The token to set.</param>
        </member>
        <member name="P:NtApiDotNet.NtProcess.User">
            <summary>
            Get the process user.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Mitigations">
            <summary>
            Get process mitigations
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ExtendedFlags">
            <summary>
            Get extended process flags.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenCurrent">
            <summary>
            Open an actual handle to the current process rather than the pseudo one used for Current
            </summary>
            <returns>The process object</returns>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Current">
            <summary>
            Get the current process.        
            </summary>
            <remarks>This only uses the pseudo handle, for the process. If you need a proper handle use OpenCurrent.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtProcess.ReadMemory(System.Int64,System.Int32)">
            <summary>
            Read memory from a process.
            </summary>
            <param name="base_address">The base address in the process.</param>
            <param name="length">The length to read.</param>
            <returns>The array of bytes read from the location. 
            If a read is short then returns fewer bytes than requested.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.WriteMemory(System.Int64,System.Byte[])">
            <summary>
            Write memory to a process.
            </summary>
            <param name="base_address">The base address in the process.</param>
            <param name="data">The data to write.</param>
            <returns>The number of bytes written to the location</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryMemoryInformation(System.Int64)">
            <summary>
            Query memory information for a process.
            </summary>
            <param name="base_address">The base address.</param>
            <returns>The queries memory information.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryAllMemoryInformation(System.Boolean)">
            <summary>
            Query all memory information regions in process memory.
            </summary>
            <returns>The list of memory regions.</returns>
            <param name="include_free_regions">True to include free regions of memory.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryAllMemoryInformation">
            <summary>
            Query all memory information regions in process memory excluding free regions.
            </summary>
            <returns>The list of memory regions.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryMappedImages">
            <summary>
            Query a list of mapped images in a process.
            </summary>
            <returns>The list of mapped images</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryMappedFiles">
            <summary>
            Query a list of mapped files in a process.
            </summary>
            <returns>The list of mapped images</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.QueryAllMappedFiles">
            <summary>
            Query a list of all mapped files and images in a process.
            </summary>
            <returns>The list of mapped images</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.AllocateMemory(System.Int64,System.Int64,NtApiDotNet.MemoryAllocationType,NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Allocate virtual memory in a process.
            </summary>
            <param name="base_address">Optional base address, if 0 will automatically select a base.</param>
            <param name="region_size">The region size to allocate.</param>
            <param name="allocation_type">The type of allocation.</param>
            <param name="protect">The allocation protection.</param>
            <returns>The address of the allocated region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.FreeMemory(System.Int64,System.Int64,NtApiDotNet.MemoryFreeType)">
            <summary>
            Free virtual emmory in a process.
            </summary>
            <param name="base_address">Base address of region to free</param>
            <param name="region_size">The size of the region.</param>
            <param name="free_type">The type to free.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.ProtectMemory(System.Int64,System.Int64,NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Change protection on a region of memory.
            </summary>
            <param name="base_address">The base address</param>
            <param name="region_size">The size of the memory region.</param>
            <param name="new_protect">The new protection type.</param>
            <returns>The old protection for the region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.SetProcessDeviceMap(NtApiDotNet.NtDirectory)">
            <summary>
            Set the process device map.
            </summary>
            <param name="device_map">The device map directory to set.</param>
            <remarks>Note that due to a bug in the Wow64 layer this won't work in a 32 bit process on a 64 bit system.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtProcess.HasDebugPort">
            <summary>
            Get whether process has a debug port.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenDebugObject">
            <summary>
            Open a process' debug object.
            </summary>
            <returns>The process' debug object.</returns>
        </member>
        <member name="P:NtApiDotNet.NtProcess.HandleCount">
            <summary>
            Get handle count.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.BreakOnTermination">
            <summary>
            Get break on termination flag.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.DebugFlags">
            <summary>
            Get debug flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ExecuteFlags">
            <summary>
            Get execute flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.IoPriority">
            <summary>
            Get IO priority.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Cookie">
            <summary>
            Get secure cookie.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.IsImageFile(NtApiDotNet.NtFile)">
            <summary>
            Queries whether process is backed by a specific file.
            </summary>
            <param name="file">File object opened with Synchronize and Execute access to test against.</param>
            <returns>True if the process is created from the image file.</returns>
        </member>
        <member name="P:NtApiDotNet.NtProcess.OwnerProcessId">
            <summary>
            Get owner process ID
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenParent(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Open parent process by ID.
            </summary>
            <param name="desired_access">The desired process access rights.</param>
            <returns>The opened process.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenParent">
            <summary>
            Open parent process by ID.
            </summary>
            <returns>The opened process.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenOwner(NtApiDotNet.ProcessAccessRights)">
            <summary>
            Open owner process by ID.
            </summary>
            <param name="desired_access">The desired process access rights.</param>
            <returns>The opened process.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtProcess.OpenOwner">
            <summary>
            Open owner process by ID.
            </summary>
            <returns>The opened process.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtProcess.WindowTitle">
            <summary>
            Get process window title (from Process Parameters).
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.WindowFlags">
            <summary>
            Get process window flags (from Process Parameters).
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.SubsystemType">
            <summary>
            Get the process subsystem type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Wow64">
            <summary>
            Get if the process is Wow64
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtProcess.IsInJob(NtApiDotNet.NtJob)">
            <summary>
            Get if process is in a job.
            </summary>
            <param name="job">A specific job to check</param>
            <returns>True if in specific job.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.IsInJob">
            <summary>
            Get if process is in a job.
            </summary>
            <returns>True if in a job.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetHandleTable">
            <summary>
            Get process handle table.
            </summary>
            <returns>The list of process handles.</returns>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetHandleTableAsObjects(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get the process handle table and try and get them as objects.
            </summary>
            <param name="named_only">True to only return named objects</param>
            <param name="type_names">A list of typenames to filter on (if empty then return all)</param>
            <returns>The list of handles as objects.</returns>
            <remarks>This function will drop handles it can't duplicate.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtProcess.GetHandleTableAsObjects">
            <summary>
            Get the process handle table and try and get them as objects.
            </summary>
            <returns>The list of handles as objects.</returns>
            <remarks>This function will drop handles it can't duplicate.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtProcess.IsChildProcessRestricted">
            <summary>
            Get the process handle table and try and get them as objects.
            </summary>
            <returns>The list of handles as objects.</returns>
            <remarks>This function will drop handles it can't duplicate.</remarks>
        </member>
        <member name="P:NtApiDotNet.NtProcess.IsDeleting">
            <summary>
            Gets whether the process is currently deleting.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.Protection">
            <summary>
            Get process protection information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtProcess.ImageInformation">
            <summary>
            Query process section image information.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtMappedSection">
            <summary>
            Class representing a mapped section
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMappedSection.Process">
            <summary>
            The process which the section is mapped into
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMappedSection.Length">
            <summary>
            The length of the mapped section
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMappedSection.FullPath">
            <summary>
            Get full path for mapped section.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtMappedSection.Protection">
            <summary>
            Query the memory protection setting for this mapping.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtMappedSection.ReleaseHandle">
            <summary>
            Release the internal handle
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtMappedSection.GetStream">
            <summary>
            Get the mapped section as a memory stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:NtApiDotNet.NtSection">
            <summary>
            Class to represent a NT Section object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSection.CreateImageSection(NtApiDotNet.NtFile)">
            <summary>
            Create an Image section object
            </summary>
            <param name="file">The file to create the image section from</param>
            <returns>The opened section</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SectionAccessRights,NtApiDotNet.LargeInteger,NtApiDotNet.MemoryAllocationProtect,NtApiDotNet.SectionAttributes,NtApiDotNet.NtFile,System.Boolean)">
            <summary>
            Create a section object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access</param>
            <param name="size">Optional size of the section</param>
            <param name="protection">The section protection</param>
            <param name="attributes">The section attributes</param>
            <param name="file">Optional backing file</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Create(NtApiDotNet.ObjectAttributes,NtApiDotNet.SectionAccessRights,NtApiDotNet.LargeInteger,NtApiDotNet.MemoryAllocationProtect,NtApiDotNet.SectionAttributes,NtApiDotNet.NtFile)">
            <summary>
            Create a section object
            </summary>
            <param name="object_attributes">The object attributes</param>
            <param name="desired_access">The desired access</param>
            <param name="size">Optional size of the section</param>
            <param name="protection">The section protection</param>
            <param name="attributes">The section attributes</param>
            <param name="file">Optional backing file</param>
            <returns>The opened section</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.Create(System.String,NtApiDotNet.NtObject,NtApiDotNet.SectionAccessRights,System.Nullable{System.Int64},NtApiDotNet.MemoryAllocationProtect,NtApiDotNet.SectionAttributes,NtApiDotNet.NtFile)">
            <summary>
            Create a section object
            </summary>
            <param name="path">The path to the section</param>
            <param name="root">The root if path is relative</param>
            <param name="desired_access">The desired access</param>
            <param name="size">Optional size of the section</param>
            <param name="protection">The section protection</param>
            <param name="attributes">The section attributes</param>
            <param name="file">Optional backing file</param>
            <returns>The opened section</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.Create(System.Int64)">
            <summary>
            Create a section object
            </summary>
            <param name="size">Size of the section</param>
            <returns>The opened section</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSection.MapReadWrite(NtApiDotNet.NtProcess)">
            <summary>
            Map section Read/Write into a specific process
            </summary>
            <param name="process">The process to map into</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.MapRead(NtApiDotNet.NtProcess)">
            <summary>
            Map section Read Only into a specific process
            </summary>
            <param name="process">The process to map into</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.MapRead">
            <summary>
            Map section Read Only into a current process
            </summary>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.MapReadWrite">
            <summary>
            Map section Read/Write into a current process
            </summary>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Map(NtApiDotNet.NtProcess,NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Map section into a specific process
            </summary>
            <param name="process">The process to map into</param>
            <param name="type">The protection of the mapping</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Map(NtApiDotNet.NtProcess,NtApiDotNet.MemoryAllocationProtect,System.IntPtr,System.IntPtr)">
            <summary>
            Map section into a specific process
            </summary>
            <param name="process">The process to map into</param>
            <param name="type">The protection of the mapping</param>
            <param name="base_address">Optional base address</param>
            <param name="view_size">Optional view size</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Map(NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Map section into the current process
            </summary>
            <param name="type">The protection of the mapping</param>
            <returns>The mapped section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SectionAccessRights,System.Boolean)">
            <summary>
            Open a section object
            </summary>
            <param name="object_attributes">The object attributes for the section</param>
            <param name="desired_access">The desired access for the sections</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.SectionAccessRights)">
            <summary>
            Open a section object
            </summary>
            <param name="object_attributes">The object attributes for the section</param>
            <param name="desired_access">The desired access for the sections</param>
            <returns>The opened section</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.SectionAccessRights)">
            <summary>
            Open a section object
            </summary>
            <param name="path">The path to the section</param>
            <param name="root">Root object if the path is relative</param>
            <param name="desired_access">The desired access for the sections</param>
            <returns>The opened section</returns>
        </member>
        <member name="P:NtApiDotNet.NtSection.Size">
            <summary>
            Get the size of the section
            </summary>
            <returns>The size</returns>
        </member>
        <member name="M:NtApiDotNet.NtSection.Extend(System.Int64)">
            <summary>
            Extend the section to a new size.
            </summary>
            <param name="new_size">The new size to extend to.</param>
            <returns>The new size.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="P:NtApiDotNet.NtSection.Attributes">
            <summary>
            Get the attributes of the section
            </summary>
            <returns>The section attributes</returns>
        </member>
        <member name="T:NtApiDotNet.NtStatus">
            <summary>
            NT status values
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtThread">
            <summary>
            Class to represent a NT Thread object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtThread.Resume">
            <summary>
            Resume the thread.
            </summary>
            <returns>The suspend count</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Suspend">
            <summary>
            Suspend the thread
            </summary>
            <returns>The suspend count</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Terminate(NtApiDotNet.NtStatus)">
            <summary>
            Terminate the thread
            </summary>
            <param name="status">The thread status exit code</param>
        </member>
        <member name="M:NtApiDotNet.NtThread.Open(System.Int32,NtApiDotNet.ThreadAccessRights,System.Boolean)">
            <summary>
            Open a thread
            </summary>
            <param name="thread_id">The thread ID to open</param>
            <param name="desired_access">The desired access for the handle</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Open(System.Int32,NtApiDotNet.ThreadAccessRights)">
            <summary>
            Open a thread
            </summary>
            <param name="thread_id">The thread ID to open</param>
            <param name="desired_access">The desired access for the handle</param>
            <returns>The opened object</returns>
        </member>
        <member name="P:NtApiDotNet.NtThread.ThreadId">
            <summary>
            Get thread ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.ProcessId">
            <summary>
            Get process ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.ProcessName">
            <summary>
            Get name of process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.Priority">
            <summary>
            Get thread's current priority
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.BasePriority">
            <summary>
            Get thread's base priority
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.TebBaseAddress">
            <summary>
            Get the thread's TEB base address.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.AllowDynamicCode">
            <summary>
            Get whether thread is allowed to create dynamic code.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.Impersonating">
            <summary>
            Get whether thread is impersonating another token.
            </summary>
            <remarks>Note that this tries to open the thread's token and return true if it could open. There a return of false
            might just indicate that the caller doesn't have permission to open the token, not that it's not impersonating.</remarks>
        </member>
        <member name="M:NtApiDotNet.NtThread.Alert">
            <summary>
            Wake the thread from an alertable state.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtThread.AlertResume">
            <summary>
            Wake the thread from an alertable state and resume the thread.
            </summary>
            <returns>The previous suspend count for the thread.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.HideFromDebugger">
            <summary>
            Hide the thread from debug events.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtThread.SetImpersonationToken(NtApiDotNet.NtToken)">
            <summary>
            The set the thread's impersonation token
            </summary>
            <param name="token">The impersonation token to set</param>
        </member>
        <member name="M:NtApiDotNet.NtThread.ImpersonateAnonymousToken">
            <summary>
            Impersonate the anonymous token
            </summary>
            <returns>The impersonation context. Dispose to revert to self</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.Impersonate(NtApiDotNet.NtToken)">
            <summary>
            Impersonate a token
            </summary>
            <returns>The impersonation context. Dispose to revert to self</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.ImpersonateThread(NtApiDotNet.NtThread,NtApiDotNet.SecurityImpersonationLevel)">
            <summary>
            Impersonate another thread.
            </summary>
            <param name="thread">The thread to impersonate.</param>
            <param name="impersonation_level">The impersonation level</param>
            <returns>The imperonsation context. Dispose to revert to self.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.ImpersonateThread(NtApiDotNet.NtThread)">
            <summary>
            Impersonate another thread.
            </summary>
            <param name="thread">The thread to impersonate.</param>
            <returns>The imperonsation context. Dispose to revert to self.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.OpenCurrent">
            <summary>
            Open an actual handle to the current thread rather than the pseudo one used for Current
            </summary>
            <returns>The thread object</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.OpenToken">
            <summary>
            Open the thread's token
            </summary>
            <returns>The token, null if no token available</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.QueueUserApc(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Queue a user APC to the thread.
            </summary>
            <param name="apc_routine">The APC callback pointer.</param>
            <param name="arg1">Argument 0</param>
            <param name="arg2">Argument 1</param>
            <param name="arg3">Argument 2</param>
        </member>
        <member name="P:NtApiDotNet.NtThread.FullPath">
            <summary>
            Get name of the thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtThread.Description">
            <summary>
            Get or set a thread's description.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetThreads(NtApiDotNet.ThreadAccessRights,System.Boolean)">
            <summary>
            Gets all accessible threads on the system.
            </summary>
            <param name="desired_access">The desired access for each thread.</param>
            <param name="from_system_info">Get the thread list from system information.</param>
            <returns>The list of accessible threads.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetThreads(NtApiDotNet.ThreadAccessRights)">
            <summary>
            Gets all accessible threads on the system.
            </summary>
            <param name="desired_access">The desired access for each thread.</param>
            <returns>The list of accessible threads.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetFirstThread(NtApiDotNet.NtProcess,NtApiDotNet.ThreadAccessRights)">
            <summary>
            Get first thread for process.
            </summary>
            <param name="process">The process handle to get the threads.</param>
            <param name="desired_access">The desired access for the thread.</param>
            <returns>The first thread, or null if no more available.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetNextThread(NtApiDotNet.NtProcess,NtApiDotNet.ThreadAccessRights)">
            <summary>
            Get next thread for process relative to current thread.
            </summary>
            <param name="process">The process handle to get the threads.</param>
            <param name="desired_access">The desired access for the thread.</param>
            <returns>The next thread, or null if no more available.</returns>
        </member>
        <member name="M:NtApiDotNet.NtThread.GetContext(NtApiDotNet.ContextFlags)">
            <summary>
            Get the thread context.
            </summary>
            <param name="flags">Flags for context parts to get.</param>
            <returns>An instance of an IContext object. Needs to be cast to correct type to access.</returns>
        </member>
        <member name="P:NtApiDotNet.NtThread.Current">
            <summary>
            Get the current thread.        
            </summary>
            <remarks>This only uses the pseudo handle, for the thread. You can't use it in different threads. If you need to do that use OpenCurrent.</remarks>
            <see cref="M:NtApiDotNet.NtThread.OpenCurrent"/>
        </member>
        <member name="M:NtApiDotNet.NtThread.Sleep(System.Boolean,System.Int64)">
            <summary>
            Sleep the current thread
            </summary>
            <param name="alertable">Set if the thread should be alertable</param>
            <param name="delay">The delay, negative values indicate relative times.</param>
            <returns>True if the thread was alerted before the delay expired.</returns>
        </member>
        <member name="T:NtApiDotNet.TokenPrivilege">
            <summary>
            Class to represent the state of a token privilege
            </summary>
        </member>
        <member name="P:NtApiDotNet.TokenPrivilege.Attributes">
            <summary>
            Privilege attributes
            </summary>
        </member>
        <member name="P:NtApiDotNet.TokenPrivilege.Luid">
            <summary>
            Privilege LUID
            </summary>
        </member>
        <member name="P:NtApiDotNet.TokenPrivilege.Name">
            <summary>
            Get the name of the privilege
            </summary>
            <returns>The privilege name</returns>
        </member>
        <member name="P:NtApiDotNet.TokenPrivilege.DisplayName">
            <summary>
            Get the display name/description of the privilege
            </summary>
            <returns>The display name</returns>
        </member>
        <member name="P:NtApiDotNet.TokenPrivilege.Enabled">
            <summary>
            Get whether privilege is enabled
            </summary>
        </member>
        <member name="M:NtApiDotNet.TokenPrivilege.#ctor(NtApiDotNet.Luid,NtApiDotNet.PrivilegeAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="luid">The privilege LUID</param>
            <param name="attribute">The privilege attributes</param>
        </member>
        <member name="M:NtApiDotNet.TokenPrivilege.#ctor(NtApiDotNet.TokenPrivilegeValue,NtApiDotNet.PrivilegeAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="value">The privilege value</param>
            <param name="attribute">The privilege attributes</param>
        </member>
        <member name="M:NtApiDotNet.TokenPrivilege.#ctor(System.String,NtApiDotNet.PrivilegeAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="name">The privilege name.</param>
            <param name="attribute">The privilege attributes</param>
        </member>
        <member name="M:NtApiDotNet.TokenPrivilege.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The privilege name.</param>
        </member>
        <member name="M:NtApiDotNet.TokenPrivilege.ToString">
            <summary>
            Conver to a string
            </summary>
            <returns>The privilege name.</returns>
        </member>
        <member name="T:NtApiDotNet.UserGroup">
            <summary>
            Class to represent a user group
            </summary>
        </member>
        <member name="P:NtApiDotNet.UserGroup.Sid">
            <summary>
            The SID of the user group
            </summary>
        </member>
        <member name="P:NtApiDotNet.UserGroup.Attributes">
            <summary>
            The attributes of the user group
            </summary>
        </member>
        <member name="P:NtApiDotNet.UserGroup.Enabled">
            <summary>
            Get whether the user group is enabled
            </summary>
        </member>
        <member name="P:NtApiDotNet.UserGroup.Mandatory">
            <summary>
            Get whether the user group is mandatory
            </summary>
        </member>
        <member name="P:NtApiDotNet.UserGroup.DenyOnly">
            <summary>
            Get whether the user group is used for deny only
            </summary>
        </member>
        <member name="M:NtApiDotNet.UserGroup.#ctor(NtApiDotNet.Sid,NtApiDotNet.GroupAttributes)">
            <summary>
            Constructor
            </summary>
            <param name="sid">The SID</param>
            <param name="attributes">The attributes</param>
        </member>
        <member name="M:NtApiDotNet.UserGroup.#ctor(NtApiDotNet.Sid)">
            <summary>
            Constructor from a SID.
            </summary>
            <param name="sid">The SID</param>
        </member>
        <member name="M:NtApiDotNet.UserGroup.#ctor(System.String)">
            <summary>
            Constructor from a SID or account name.
            </summary>
            <param name="name">The SID or account name.</param>
        </member>
        <member name="M:NtApiDotNet.UserGroup.ToString">
            <summary>
            Convert to a string
            </summary>
            <returns>The account name if available or the SDDL SID</returns>
        </member>
        <member name="T:NtApiDotNet.NtToken">
            <summary>
            Class representing a Token object
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtToken.DuplicateToken(NtApiDotNet.TokenType,NtApiDotNet.SecurityImpersonationLevel,NtApiDotNet.TokenAccessRights,System.Boolean)">
            <summary>
            Duplicate token as specific type.
            </summary>
            <param name="type">The token type</param>
            <param name="level">The impersonation level us type is Impersonation</param>
            <param name="desired_access">Open with the desired access.</param>
            <param name="throw_on_error">If true then throw an exception on error.</param>
            <returns>The new token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.DuplicateToken(NtApiDotNet.TokenType,NtApiDotNet.SecurityImpersonationLevel,NtApiDotNet.TokenAccessRights)">
            <summary>
            Duplicate token as specific type
            </summary>
            <param name="type">The token type</param>
            <param name="level">The impersonation level us type is Impersonation</param>
            <param name="desired_access">Open with the desired access.</param>
            <returns>The new token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.DuplicateToken">
            <summary>
            Duplicate the token as a primary token
            </summary>
            <returns>The new token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.DuplicateToken(NtApiDotNet.SecurityImpersonationLevel)">
            <summary>
            Duplicate token as an impersonation token with a specific level
            </summary>
            <param name="level">The token impersonation level</param>
            <returns>The new token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetPrivilege(System.String,System.Boolean)">
            <summary>
            Set a privilege state
            </summary>
            <param name="privilege">The name of the privilege (e.g. SeDebugPrivilege)</param>
            <param name="enable">True to enable the privilege, false to disable</param>
            <returns>True if successfully changed the state of the privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetPrivilege(NtApiDotNet.Luid,NtApiDotNet.PrivilegeAttributes)">
            <summary>
            Set a privilege state
            </summary>
            <param name="luid">The luid of the privilege</param>
            <param name="attributes">The privilege attributes to set.</param>
            <returns>True if successfully changed the state of the privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetPrivilege(NtApiDotNet.TokenPrivilegeValue,NtApiDotNet.PrivilegeAttributes)">
            <summary>
            Set a privilege state
            </summary>
            <param name="privilege">The value of the privilege</param>
            <param name="attributes">The privilege attributes to set.</param>
            <returns>True if successfully changed the state of the privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.RemovePrivilege(NtApiDotNet.TokenPrivilegeValue)">
            <summary>
            Remove a privilege.
            </summary>
            <param name="privilege">The value of the privilege to remove.</param>
            <returns>True if successfully removed the privilege.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.RemovePrivilege(NtApiDotNet.Luid)">
            <summary>
            Remove a privilege.
            </summary>
            <param name="luid">The LUID of the privilege to remove.</param>
            <returns>True if successfully removed the privilege.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.EnableDebugPrivilege">
            <summary>
            Enable debug privilege for the current process token.
            </summary>
            <returns>True if set the debug privilege</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess,NtApiDotNet.TokenAccessRights,System.Boolean)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <param name="desired_access">The desired access for the token</param>
            <param name="throw_on_error">If true then throw an exception on error.</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess,System.Boolean)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess,System.Boolean,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(NtApiDotNet.NtProcess)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="process">The process to open the token for</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken">
            <summary>
            Open the process token of the current process
            </summary>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(System.Boolean)">
            <summary>
            Open the process token of the current process
            </summary>        
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(System.Boolean,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the process token of the current process
            </summary>        
            <param name="duplicate">True to duplicate the token before returning</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(System.Int32,System.Boolean)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="pid">The id of the process to open the token for</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(System.Int32,System.Boolean,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="pid">The id of the process to open the token for</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenProcessToken(System.Int32)">
            <summary>
            Open the process token of another process
            </summary>
            <param name="pid">The id of the process to open the token for</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(NtApiDotNet.NtThread,System.Boolean,NtApiDotNet.TokenAccessRights,System.Boolean)">
            <summary>
            Open the thread token
            </summary>
            <param name="thread">The thread to open the token for</param>
            <param name="open_as_self">Open the token as the current identify rather than the impersonated one</param>
            <param name="desired_access">The desired access for the token</param>
            <param name="throw_on_error">If true then throw an exception on error.</param>
            <returns>The opened token result</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(NtApiDotNet.NtThread,System.Boolean,System.Boolean,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the thread token
            </summary>
            <param name="thread">The thread to open the token for</param>
            <param name="open_as_self">Open the token as the current identify rather than the impersonated one</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(System.Int32,System.Boolean,System.Boolean,NtApiDotNet.TokenAccessRights)">
            <summary>
            Open the thread token
            </summary>
            <param name="tid">The ID of the thread to open the token for</param>
            <param name="open_as_self">Open the token as the current identify rather than the impersonated one</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <param name="desired_access">The desired access for the token</param>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(NtApiDotNet.NtThread,System.Boolean,System.Boolean)">
            <summary>
            Open the thread token
            </summary>
            <param name="thread">The thread to open the token for</param>
            <param name="open_as_self">Open the token as the current identify rather than the impersonated one</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(NtApiDotNet.NtThread)">
            <summary>
            Open the thread token
            </summary>
            <param name="thread">The thread to open the token for</param>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken(System.Boolean)">
            <summary>
            Open the current thread token
            </summary>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenThreadToken">
            <summary>
            Open the current thread token
            </summary>
            <returns>The opened token, if no token return null</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenEffectiveToken(NtApiDotNet.NtThread,System.Boolean)">
            <summary>
            Open the effective token, thread if available or process
            </summary>
            <param name="thread">The thread to open the token for</param>
            <param name="duplicate">True to duplicate the token before returning</param>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.OpenEffectiveToken">
            <summary>
            Open the current effective token, thread if available or process
            </summary>
            <returns>The opened token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot open token</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.CreateLowBoxToken(NtApiDotNet.Sid)">
            <summary>
            Create a LowBox token from the current token.
            </summary>
            <param name="package_sid">The package SID</param>
            <returns>The created LowBox token.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.CreateLowBoxToken(NtApiDotNet.Sid,NtApiDotNet.NtObject[])">
            <summary>
            Create a LowBox token from the current token.
            </summary>
            <param name="package_sid">The package SID</param>
            <param name="handles">List of handles to capture with the token</param>
            <returns>The created LowBox token.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.CreateLowBoxToken(NtApiDotNet.Sid,System.Collections.Generic.IEnumerable{NtApiDotNet.Sid},System.Collections.Generic.IEnumerable{NtApiDotNet.NtObject},NtApiDotNet.TokenAccessRights)">
            <summary>
            Create a LowBox token from the current token.
            </summary>
            <param name="package_sid">The package SID</param>
            <param name="handles">List of handles to capture with the token</param>
            <param name="capability_sids">List of capability sids to add.</param>
            <param name="desired_access">Desired token access.</param>
            <returns>The created LowBox token.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.Filter(NtApiDotNet.FilterTokenFlags,System.Collections.Generic.IEnumerable{NtApiDotNet.Sid},System.Collections.Generic.IEnumerable{NtApiDotNet.TokenPrivilegeValue},System.Collections.Generic.IEnumerable{NtApiDotNet.Sid})">
            <summary>
            Filter a token to remove groups/privileges and add restricted SIDs
            </summary>
            <param name="flags">Filter token flags</param>
            <param name="sids_to_disable">List of SIDs to disable</param>
            <param name="privileges_to_delete">List of privileges to delete</param>
            <param name="restricted_sids">List of restricted SIDs to add</param>
            <returns>The new token.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Filter(NtApiDotNet.FilterTokenFlags,System.Collections.Generic.IEnumerable{NtApiDotNet.Sid},System.Collections.Generic.IEnumerable{NtApiDotNet.Luid},System.Collections.Generic.IEnumerable{NtApiDotNet.Sid})">
            <summary>
            Filter a token to remove groups/privileges and add restricted SIDs
            </summary>
            <param name="flags">Filter token flags</param>
            <param name="sids_to_disable">List of SIDs to disable</param>
            <param name="privileges_to_delete">List of privileges to delete</param>
            <param name="restricted_sids">List of restricted SIDs to add</param>
            <returns>The new token.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Filter(NtApiDotNet.FilterTokenFlags)">
            <summary>
            Filter a token to remove privileges and groups.
            </summary>
            <param name="flags">Filter token flags</param>
            <returns>The new filtered token.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Create(NtApiDotNet.TokenAccessRights,NtApiDotNet.ObjectAttributes,NtApiDotNet.TokenType,NtApiDotNet.Luid,System.Int64,NtApiDotNet.UserGroup,System.Collections.Generic.IEnumerable{NtApiDotNet.UserGroup},System.Collections.Generic.IEnumerable{NtApiDotNet.TokenPrivilege},NtApiDotNet.Sid,NtApiDotNet.Sid,NtApiDotNet.Acl,System.String,System.Boolean)">
            <summary>
            Create a token. Needs SeCreateTokenPrivilege.
            </summary>
            <param name="desired_access">The desired access for the token.</param>
            <param name="object_attributes">Object attributes, used to pass SecurityDescriptor or SQOS for impersonation token.</param>
            <param name="token_type">The type of token.</param>
            <param name="authentication_id">The authentication ID for the token.</param>
            <param name="expiration_time">The expiration time for the token.</param>
            <param name="token_user">The user for the token.</param>
            <param name="token_groups">The groups for the token.</param>
            <param name="token_privileges">The privileges for the token.</param>
            <param name="token_owner">The owner of the token.</param>
            <param name="token_primary_group">The primary group for the token.</param>
            <param name="token_default_dacl">The default dacl for the token.</param>
            <param name="token_source">The source for the token.</param>
            <param name="throw_on_error">True to throw on error.</param>
            <returns>The token object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Create(NtApiDotNet.TokenAccessRights,NtApiDotNet.ObjectAttributes,NtApiDotNet.TokenType,NtApiDotNet.Luid,System.Int64,NtApiDotNet.UserGroup,System.Collections.Generic.IEnumerable{NtApiDotNet.UserGroup},System.Collections.Generic.IEnumerable{NtApiDotNet.TokenPrivilege},NtApiDotNet.Sid,NtApiDotNet.Sid,NtApiDotNet.Acl,System.String)">
            <summary>
            Create a token. Needs SeCreateTokenPrivilege.
            </summary>
            <param name="desired_access">The desired access for the token.</param>
            <param name="object_attributes">Object attributes, used to pass SecurityDescriptor or SQOS for impersonation token.</param>
            <param name="token_type">The type of token.</param>
            <param name="authentication_id">The authentication ID for the token.</param>
            <param name="expiration_time">The expiration time for the token.</param>
            <param name="token_user">The user for the token.</param>
            <param name="token_groups">The groups for the token.</param>
            <param name="token_privileges">The privileges for the token.</param>
            <param name="token_owner">The owner of the token.</param>
            <param name="token_primary_group">The primary group for the token.</param>
            <param name="token_default_dacl">The default dacl for the token.</param>
            <param name="token_source">The source for the token.</param>
            <returns>The token object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Create(NtApiDotNet.Sid,System.Collections.Generic.IEnumerable{NtApiDotNet.Sid},System.Collections.Generic.IEnumerable{NtApiDotNet.TokenPrivilegeValue})">
            <summary>
            Create a token. Needs SeCreateTokenPrivilege.
            </summary>
            <param name="token_user">The user for the token.</param>
            <param name="token_groups">The groups for the token.</param>
            <param name="token_privileges">The privileges for the token.</param>
            <returns>The token object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.Create(NtApiDotNet.Sid)">
            <summary>
            Create a token. Needs SeCreateTokenPrivilege.
            </summary>
            <param name="token_user">The user for the token.</param>
            <returns>The token object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetGroup(NtApiDotNet.Sid,NtApiDotNet.GroupAttributes)">
            <summary>
            Set the state of a group
            </summary>
            <param name="group">The group SID to set</param>
            <param name="attributes">The attributes to set</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetSessionId(System.Int32)">
            <summary>
            Set the session ID of a token
            </summary>
            <param name="session_id">The session ID</param>
        </member>
        <member name="P:NtApiDotNet.NtToken.User">
            <summary>
            Get token user
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Groups">
            <summary>
            Get token groups
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.EnabledGroups">
            <summary>
            Get list of enabled groups.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.DenyOnlyGroups">
            <summary>
            Get list of deny only groups.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.GroupCount">
            <summary>
            Get count of groups in this token.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.CurrentUser">
            <summary>
            Get the current user.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AuthenticationId">
            <summary>
            Get the authentication ID for the token
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.TokenType">
            <summary>
            Get the token's type
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.ExpirationTime">
            <summary>
            Get the token's expiration time.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Id">
            <summary>
            Get the Token's Id
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.ModifiedId">
            <summary>
            Get the Toen's modified Id.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Owner">
            <summary>
            Get the token's owner.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.PrimaryGroup">
            <summary>
            Get the token's primary group
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.DefaultDacl">
            <summary>
            Get the token's default DACL
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetDefaultDacl(NtApiDotNet.Acl)">
            <summary>
            Set a token's default DACL
            </summary>
            <param name="dacl">The DACL to set.</param>
        </member>
        <member name="P:NtApiDotNet.NtToken.Source">
            <summary>
            Get the token's source
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.RestrictedSids">
            <summary>
            Get token's restricted sids
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.RestrictedSidsCount">
            <summary>
            Get count of restricted sids
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.ImpersonationLevel">
            <summary>
            Get token's impersonation level
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.SessionId">
            <summary>
            Get token's session ID
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.SandboxInert">
            <summary>
            Get whether token has sandbox inert flag set.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Origin">
            <summary>
            Get token's origin
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.ElevationType">
            <summary>
            Get token's elevation type
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Elevated">
            <summary>
            Get whether token is elevated
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.HasRestrictions">
            <summary>
            Get whether token has restrictions
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.UIAccess">
            <summary>
            Get whether token has UI access flag set
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.VirtualizationAllowed">
            <summary>
            Get whether virtualization is allowed
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.VirtualizationEnabled">
            <summary>
            Get whether virtualization is enabled
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetVirtualizationEnabled(System.Boolean)">
            <summary>
            Set virtualization enabled
            </summary>
            <param name="enable">True to enable virtualization</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetUIAccess(System.Boolean)">
            <summary>
            Set UI Access flag.
            </summary>
            <param name="enable">True to enable UI Access.</param>
        </member>
        <member name="P:NtApiDotNet.NtToken.Restricted">
            <summary>
            Get whether token is stricted
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtToken.GetLinkedToken">
            <summary>
            Get the linked token 
            </summary>
            <returns>The linked token</returns>
        </member>
        <member name="P:NtApiDotNet.NtToken.Capabilities">
            <summary>
            Get token capacilities
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.MandatoryPolicy">
            <summary>
            Get token mandatory policy
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.LogonSid">
            <summary>
            Get token logon sid
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtToken.Impersonate">
            <summary>
            Impersonate the token
            </summary>
            <returns>An impersonation context, dispose to revert to process token</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.RunUnderImpersonate``1(System.Func{``0})">
            <summary>
            Run a function under impersonation.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="callback">The callback to run.</param>
            <returns>The return value from the callback.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.RunUnderImpersonate(System.Action)">
            <summary>
            Run an action under impersonation.
            </summary>
            <param name="callback">The callback to run.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.Impersonate(System.Int32,NtApiDotNet.SecurityImpersonationLevel)">
            <summary>
            Impersonate another process' token
            </summary>
            <param name="impersonation_level">The impersonation level</param>
            <param name="pid">Process ID of the other process</param>
            <returns>An impersonation context, dispose to revert to process token</returns>
        </member>
        <member name="P:NtApiDotNet.NtToken.IntegrityLevelSid">
            <summary>
            Get token's integrity level sid
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AppContainerNumber">
            <summary>
            Get token's App Container number.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.IntegrityLevel">
            <summary>
            Get token's integrity level.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.SecurityAttributes">
            <summary>
            Get token's security attributes
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtToken.GetSecurityAttributeByName(System.String,NtApiDotNet.ClaimSecurityValueType)">
            <summary>
            Get a security attribute by name.
            </summary>
            <param name="name">The name of the security attribute, such as WIN://PKG</param>
            <param name="type">The expected type of the security attribute. If None return ignore type check.</param>
            <returns>The security attribute or null if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.GetSecurityAttributeByName(System.String)">
            <summary>
            Get a security attribute by name.
            </summary>
            <param name="name">The name of the security attribute, such as WIN://PKG</param>
            <returns>The security attribute or null if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetIntegrityLevelRaw(System.Int32)">
            <summary>
            Set the token's integrity level.
            </summary>
            <param name="level">The level to set.</param>
        </member>
        <member name="M:NtApiDotNet.NtToken.SetIntegrityLevel(NtApiDotNet.TokenIntegrityLevel)">
            <summary>
            Set the token's integrity level.
            </summary>
            <param name="level">The level to set.</param>
        </member>
        <member name="P:NtApiDotNet.NtToken.AppContainer">
            <summary>
            Get whether a token is an AppContainer token
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.LowPrivilegeAppContainer">
            <summary>
            Get whether the token is configured for low privilege.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AppContainerSid">
            <summary>
            Get token's AppContainer sid
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.PackageName">
            <summary>
            Get token's AppContainer package name (if available). 
            Returns an empty string if not an AppContainer.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.DeviceGroups">
            <summary>
            Get token's device groups
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.RestrictedDeviceGroups">
            <summary>
            Get token's restricted device groups.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.Privileges">
            <summary>
            Get list of privileges for token
            </summary>
            <returns>The list of privileges</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if can't query privileges</exception>
        </member>
        <member name="M:NtApiDotNet.NtToken.GetPrivilege(NtApiDotNet.TokenPrivilegeValue)">
            <summary>
            Get the state of a privilege.
            </summary>
            <param name="privilege">The privilege to get the state of.</param>
            <returns>The privilege, or null if it can't be found</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if can't query privileges</exception>
        </member>
        <member name="P:NtApiDotNet.NtToken.LocalSystemAuthId">
            <summary>
            Get authentication ID for LOCAL SYSTEM
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.LocalServiceAuthId">
            <summary>
            Get authentication ID for LOCAL SERVICE
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.NetworkServiceAuthId">
            <summary>
            Get authentication ID for NETWORK SERVICE
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.AnonymousAuthId">
            <summary>
            Get authentication ID for ANONYMOUS
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtToken.FullPath">
            <summary>
            Get full path to token
            </summary>
        </member>
        <member name="T:NtApiDotNet.MemoryInformation">
            <summary>
            Class to represent memory information.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.BaseAddress">
            <summary>
            Base address of memory region.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.AllocationBase">
            <summary>
            Allocation base for memory region.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.AllocationProtect">
            <summary>
            Initial allocation protection.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.RegionSize">
            <summary>
            Region size.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.State">
            <summary>
            Memory state.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.Protect">
            <summary>
            Current memory protection.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.Type">
            <summary>
            Memory type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MemoryInformation.MappedImagePath">
            <summary>
            The mapped image path, if an image.
            </summary>
        </member>
        <member name="T:NtApiDotNet.MappedFile">
            <summary>
            Class which represents a mapped file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.Path">
            <summary>
            Native path to file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.Sections">
            <summary>
            List of mapped sections.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.BaseAddress">
            <summary>
            Mapped base address of file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.Size">
            <summary>
            Mapped size of file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.MappedFile.IsImage">
            <summary>
            True if the mapped file is an image section.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtVirtualMemory">
            <summary>
            Static class to access virtual memory functions of NT.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QuerySectionName(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Boolean)">
            <summary>
            Query section name,
            </summary>
            <param name="process">The process to query from.</param>
            <param name="base_address">The base address to query.</param>
            <param name="throw_on_error">True to throw on error</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QuerySectionName(NtApiDotNet.SafeKernelObjectHandle,System.Int64)">
            <summary>
            Query section name,
            </summary>
            <param name="process">The process to query from.</param>
            <param name="base_address">The base address to query.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QueryMemoryInformation(NtApiDotNet.SafeKernelObjectHandle,System.Int64)">
            <summary>
            Query memory information for a process.
            </summary>
            <param name="process">The process to query.</param>
            <param name="base_address">The base address.</param>
            <returns>The memory information for the region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QueryMemoryInformation(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Query all memory information regions in process memory.
            </summary>
            <returns>The list of memory regions.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.QueryMappedFiles(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Query a list of mapped files in a process.
            </summary>
            <param name="process">The process to query.</param>
            <returns>The list of mapped images</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.ReadMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int32)">
            <summary>
            Read memory from a process.
            </summary>
            <param name="process">The process to read from.</param>
            <param name="base_address">The base address in the process.</param>
            <param name="length">The length to read.</param>
            <returns>The array of bytes read from the location. 
            If a read is short then returns fewer bytes than requested.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.WriteMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Byte[])">
            <summary>
            Write memory to a process.
            </summary>
            <param name="process">The process to write to.</param>
            <param name="base_address">The base address in the process.</param>
            <param name="data">The data to write.</param>
            <returns>The number of bytes written to the location</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.ReadMemory``1(NtApiDotNet.SafeKernelObjectHandle,System.Int64)">
            <summary>
            Read memory from a process.
            </summary>
            <param name="process">The process to read from.</param>
            <param name="base_address">The base address in the process.</param>
            <returns>The array of bytes read from the location. 
            If a read is short then returns fewer bytes than requested.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <typeparam name="T">Type of structure to read.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.WriteMemory``1(NtApiDotNet.SafeKernelObjectHandle,System.Int64,``0)">
            <summary>
            Write memory to a process.
            </summary>
            <param name="process">The process to write to.</param>
            <param name="base_address">The base address in the process.</param>
            <param name="data">The data to write.</param>
            <returns>The number of bytes written to the location</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
            <typeparam name="T">Type of structure to write.</typeparam>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.AllocateMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int64,NtApiDotNet.MemoryAllocationType,NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Allocate virtual memory in a process.
            </summary>
            <param name="process">The process to allocate in.</param>
            <param name="base_address">Optional base address, if 0 will automatically select a base.</param>
            <param name="region_size">The region size to allocate.</param>
            <param name="allocation_type">The type of allocation.</param>
            <param name="protect">The allocation protection.</param>
            <returns>The address of the allocated region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.FreeMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int64,NtApiDotNet.MemoryFreeType)">
            <summary>
            Free virtual emmory in a process.
            </summary>
            <param name="process">The process to free in.</param>
            <param name="base_address">Base address of region to free</param>
            <param name="region_size">The size of the region.</param>
            <param name="free_type">The type to free.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtVirtualMemory.ProtectMemory(NtApiDotNet.SafeKernelObjectHandle,System.Int64,System.Int64,NtApiDotNet.MemoryAllocationProtect)">
            <summary>
            Change protection on a region of memory.
            </summary>
            <param name="process">The process to change memory protection</param>
            <param name="base_address">The base address</param>
            <param name="region_size">The size of the memory region.</param>
            <param name="new_protect">The new protection type.</param>
            <returns>The old protection for the region.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="T:NtApiDotNet.NtWaitTimeout">
            <summary>
            Class to represent an NT timeout
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtWaitTimeout.Infinite">
            <summary>
            Get a timeout which will wait indefinitely.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWaitTimeout.FromSeconds(System.Int32)">
            <summary>
            Get a relative timeout in seconds.
            </summary>
            <param name="seconds">The number of seconds to wait.</param>
            <returns>An instance of the timeout class.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWaitTimeout.FromMilliseconds(System.Int64)">
            <summary>
            Get a relative timeout in milliseconds.
            </summary>
            <param name="ms">The number of milliseconds to wait.</param>
            <returns>An instance of the timeout class.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWaitTimeout.FromAbsolute(System.Int64)">
            <summary>
            Get an absolute time out from system start.
            </summary>
            <param name="absolute">The absolute time to wait until.</param>
            <returns>An instance of the timeout class.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWaitTimeout.FromRelative(System.Int64)">
            <summary>
            Get a relative time out from the current time.
            </summary>
            <param name="relative">The relative time to wait in units of 100ns.</param>
            <returns>An instance of the timeout class.</returns>
        </member>
        <member name="T:NtApiDotNet.NtWaitHandle">
            <summary>
            A .NET wait handle to use for interop.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWaitHandle.#ctor(NtApiDotNet.NtObject)">
            <summary>
            Create a .NET wait handle from an object.
            </summary>
            <param name="obj">The object to create the wait handle on</param>
        </member>
        <member name="M:NtApiDotNet.NtWaitHandle.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Wait asynchronously for the handle to be signaled.
            </summary>
            <param name="timeout_ms">Timeout in milliseconds.</param>
            <param name="cancellation_token">Cancellation token for wait.</param>
            <returns>A task to wait on. If result is true then event was signaled.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWaitHandle.WaitAsync(System.Int32)">
            <summary>
            Wait asynchronously for the handle to be signaled.
            </summary>
            <param name="timeout_ms">Timeout in milliseconds.</param>
            <returns>A task to wait on. If result is true then event was signaled.</returns>
        </member>
        <member name="M:NtApiDotNet.NtWaitHandle.WaitAsync">
            <summary>
            Wait asynchronously for the handle to be signaled.
            Will wait an infinite time.
            </summary>
            <returns>A task to wait on.</returns>
        </member>
        <member name="T:NtApiDotNet.NtWait">
            <summary>
            Native Wait methods.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWait.Wait(NtApiDotNet.NtObject,System.Boolean,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Wait on a single object to become signalled
            </summary>
            <param name="obj">The object to wait on</param>
            <param name="alertable">Whether the thread should be alerable</param>
            <param name="timeout">The timeout to wait for</param>
            <returns>The success status of the wait, such as STATUS_SUCCESS or STATUS_TIMEOUT</returns>
        </member>
        <member name="M:NtApiDotNet.NtWait.Wait(System.Collections.Generic.IEnumerable{NtApiDotNet.NtObject},System.Boolean,System.Boolean,NtApiDotNet.NtWaitTimeout)">
            <summary>
            Wait on multiple objects to become signalled
            </summary>
            <param name="objs">The objects to wait on</param>
            <param name="alertable">Whether the thread should be alerable</param>
            <param name="wait_all">True to wait for all objects to be signalled</param>
            <param name="timeout">The timeout to wait for</param>
            <returns>The success status of the wait, such as STATUS_WAIT_OBJECT_0 or STATUS_TIMEOUT</returns>
        </member>
        <member name="T:NtApiDotNet.NtWindowStation">
            <summary>
            Class which represents a window station object.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtWindowStation.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open a window station by name.
            </summary>
            <param name="winsta_name">The name of the window station</param>
            <param name="root">Optional root object</param>
            <returns>The instance of the window station</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtWindowStation.Open(System.String)">
            <summary>
            Open a window station by name.
            </summary>
            <param name="winsta_name"></param>
            <returns>The instance of the window station</returns>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown on error.</exception>
        </member>
        <member name="T:NtApiDotNet.NtWnf">
            <summary>
            Currently unused.
            </summary>
        </member>
        <member name="T:NtApiDotNet.AttributeFlags">
            <summary>
            Flags for OBJECT_ATTRIBUTES
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.Inherit">
            <summary>
            The handle created can be inherited
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.Permanent">
            <summary>
            The object created is marked as permanent
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.Exclusive">
            <summary>
            The object must be created exclusively
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.CaseInsensitive">
            <summary>
            The object name lookup should be done case insensitive
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.OpenIf">
            <summary>
            Open the object if it already exists
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.OpenLink">
            <summary>
            Open the object as a link
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.KernelHandle">
            <summary>
            Create as a kernel handle (not used in user-mode)
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.ForceAccessCheck">
            <summary>
            Force an access check to occur (not used in user-mode)
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.IgnoreImpersonatedDevicemap">
            <summary>
            Ignore impersonated device map when looking up object
            </summary>
        </member>
        <member name="F:NtApiDotNet.AttributeFlags.DontReparse">
            <summary>
            Fail if a reparse is encountered
            </summary>
        </member>
        <member name="T:NtApiDotNet.ObjectAttributes">
            <summary>
            A class which represents OBJECT_ATTRIBUTES
            </summary>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor">
            <summary>
            Constructor. Sets flags to None
            </summary>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(System.String,NtApiDotNet.AttributeFlags)">
            <summary>
            Constructor
            </summary>
            <param name="object_name">The name of the object</param>
            <param name="attributes">Attribute flags</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(System.String,NtApiDotNet.AttributeFlags,NtApiDotNet.NtObject)">
            <summary>
            Constructor
            </summary>
            <param name="object_name">The name of the object</param>
            <param name="attributes">Attribute flags</param>
            <param name="root">A root object to lookup a relative path</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(NtApiDotNet.AttributeFlags)">
            <summary>
            Constructor
            </summary>
            <param name="attributes">Attribute flags</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="object_name">The name of the object</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(System.String,NtApiDotNet.AttributeFlags,NtApiDotNet.SafeKernelObjectHandle,NtApiDotNet.SecurityQualityOfService,NtApiDotNet.SecurityDescriptor)">
            <summary>
            Constructor
            </summary>
            <param name="object_name">The object name, can be null.</param>
            <param name="attributes">The object attribute flags.</param>
            <param name="root">An optional root handle, can be SafeKernelObjectHandle.Null. Will duplicate the handle.</param>
            <param name="sqos">An optional security quality of service.</param>
            <param name="security_descriptor">An optional security descriptor.</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.#ctor(System.String,NtApiDotNet.AttributeFlags,NtApiDotNet.NtObject,NtApiDotNet.SecurityQualityOfService,NtApiDotNet.SecurityDescriptor)">
            <summary>
            Constructor
            </summary>
            <param name="object_name">The object name, can be null.</param>
            <param name="attributes">The object attribute flags.</param>
            <param name="root">An optional root handle, can be SafeKernelObjectHandle.Null. Will duplicate the handle.</param>
            <param name="sqos">An optional security quality of service.</param>
            <param name="security_descriptor">An optional security descriptor.</param>
        </member>
        <member name="M:NtApiDotNet.ObjectAttributes.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NtApiDotNet.ObjectTypeInformation">
            <summary>
            Native structure used for getting type information.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtType">
            <summary>
            Class representing an NT object type
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.Name">
            <summary>
            The name of the type
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.GenericMapping">
            <summary>
            The mapping from generic to specific object rights
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.ValidAccess">
            <summary>
            The valid access mask
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.SecurityRequired">
            <summary>
            True if the object needs security even if unnamed
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalNumberOfObjects">
            <summary>
            Total number of objects (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalNumberOfHandles">
            <summary>
            Total number of handles (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalPagedPoolUsage">
            <summary>
            Total paged pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalNonPagedPoolUsage">
            <summary>
            Total non-paged pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalNamePoolUsage">
            <summary>
            Total name pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.TotalHandleTableUsage">
            <summary>
            Total handle table usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterNumberOfObjects">
            <summary>
            Maximum number of objects (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterNumberOfHandles">
            <summary>
            Maximum number of handles (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterPagedPoolUsage">
            <summary>
            Maximum paged pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterNonPagedPoolUsage">
            <summary>
            Maximum non-paged pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterNamePoolUsage">
            <summary>
            Maximum name pool usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.HighWaterHandleTableUsage">
            <summary>
            Maximum handle table usage (when originally retrieved)
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.InvalidAttributes">
            <summary>
            The attributes flags which are invalid
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.MaintainHandleCount">
            <summary>
            Indicates whether handle count is mainted
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.MaintainTypeList">
            <summary>
            Indicates the type list maintained
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.PoolType">
            <summary>
            Indicates the type of pool used in allocations
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.PagedPoolUsage">
            <summary>
            Current paged pool usage
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.NonPagedPoolUsage">
            <summary>
            Current non-pages pool usage
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.Index">
            <summary>
            Type Index
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.GenericRead">
            <summary>
            Generic Read Access rights
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.GenericWrite">
            <summary>
            Generic Read Access rights
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.GenericExecute">
            <summary>
            Generic Read Access rights
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.GenericAll">
            <summary>
            Generic Read Access rights
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.ObjectType">
            <summary>
            Get implemented object type for this NT type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.AccessRightsType">
            <summary>
            Get the access rights enumerated type for this NT type.
            </summary>
        </member>
        <member name="P:NtApiDotNet.NtType.CanOpen">
            <summary>
            Can this type of open be opened by name
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtType.Open(NtApiDotNet.ObjectAttributes,NtApiDotNet.AccessMask,System.Boolean)">
            <summary>
            Open this NT type by name (if CanOpen is true)
            </summary>
            <param name="object_attributes">The object attributes to open.</param>
            <param name="desired_access">Desired access when opening.</param>
            <param name="throw_on_error">True to throw an exception on error.</param>
            <returns>The NT status code and object result.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.Open(System.String,NtApiDotNet.NtObject,NtApiDotNet.AccessMask)">
            <summary>
            Open this NT type by name (if CanOpen is true)
            </summary>
            <param name="name">The name of the object to open.</param>
            <param name="root">The root object for opening, if name is relative</param>
            <param name="desired_access">Desired access when opening.</param>
            <returns>The created object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtType.Open(System.String,NtApiDotNet.NtObject)">
            <summary>
            Open this NT type by name (if CanOpen is true)
            </summary>
            <param name="name">The name of the object to open.</param>
            <param name="root">The root object for opening, if name is relative</param>
            <returns>The created object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtType.Open(System.String)">
            <summary>
            Open this NT type by name (if CanOpen is true)
            </summary>
            <param name="name">The name of the object to open.</param>
            <returns>The created object.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error</exception>
        </member>
        <member name="M:NtApiDotNet.NtType.FromHandle(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Get open from an existing handle.
            </summary>
            <param name="handle">The existing handle.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.AccessMaskToString(NtApiDotNet.AccessMask,System.Boolean)">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <param name="granted_access">The granted access mask.</param>
            <param name="map_to_generic">True to try and convert to generic rights where possible.</param>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.AccessMaskToString(NtApiDotNet.AccessMask)">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <param name="granted_access">The granted access mask.</param>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.HasReadPermission(NtApiDotNet.AccessMask)">
            <summary>
            Checks if an access mask represents a read permission on this type
            </summary>
            <param name="access_mask">The access mask to check</param>
            <returns>True if it has read permissions</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.HasWritePermission(NtApiDotNet.AccessMask)">
            <summary>
            Checks if an access mask represents a write permission on this type
            </summary>
            <param name="access_mask">The access mask to check</param>
            <returns>True if it has write permissions</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.HasExecutePermission(NtApiDotNet.AccessMask)">
            <summary>
            Checks if an access mask represents a execute permission on this type
            </summary>
            <param name="access_mask">The access mask to check</param>
            <returns>True if it has execute permissions</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.HasFullPermission(NtApiDotNet.AccessMask)">
            <summary>
            Checks if an access mask represents a full permission on this type
            </summary>
            <param name="access_mask">The access mask to check</param>
            <returns>True if it has full permissions</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.MapGenericRights(NtApiDotNet.AccessMask)">
            <summary>
            Map generic access rights to specific access rights for this type
            </summary>
            <param name="access_mask">The access mask to map</param>
            <returns>The mapped access mask</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.UnmapGenericRights(NtApiDotNet.AccessMask)">
            <summary>
            Unmap specific access rights to generic access rights for this type
            </summary>
            <param name="access_mask">The access mask to unmap</param>
            <returns>The unmapped access mask</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.IsValidAccess(NtApiDotNet.AccessMask)">
            <summary>
            Checks if an access mask is valid for access of this object type.
            </summary>
            <param name="access_mask">The access mask to check</param>
            <returns>True if it valid access</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByIndex(System.Int32)">
            <summary>
            Get a type object by index
            </summary>
            <param name="index">The index</param>
            <returns>The object type, null if not found</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByIndex(System.Int32,System.Boolean)">
            <summary>
            Get a type object by index
            </summary>
            <param name="index">The index</param>
            <param name="cached">True to get a cached type, false to return a live types.</param>
            <returns>The object type, null if not found</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get a type object by name
            </summary>
            <param name="name">The name of the type</param>
            <param name="create_fake_type">True to create a fake type if needed.</param>
            <param name="cached">True to get a cached type, false to return a live types.</param>
            <returns>The object type, null if not found</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByName(System.String,System.Boolean)">
            <summary>
            Get a type object by name
            </summary>
            <param name="name">The name of the type</param>
            <param name="create_fake_type">True to create a fake type if needed.</param>
            <returns>The object type, null if not found</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByType``1(System.Boolean)">
            <summary>
            Get an NT type based on the implemented .NET type.
            </summary>
            <typeparam name="T">A type derived from NtObject</typeparam>
            <param name="cached">True to get a cached type, false to return a live types.</param>
            <returns>The NtType represented by this .NET type. Note if a type is represented with multiple
            names only return the first one we find.</returns>
            <exception cref="T:System.ArgumentException">Thrown if there exists no .NET type which maps to this type.</exception>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypeByType``1">
            <summary>
            Get an NT type based on the implemented .NET type.
            </summary>
            <typeparam name="T">A type derived from NtObject</typeparam>
            <returns>The NtType represented by this .NET type. Note if a type is represented with multiple
            names only return the first one we find.</returns>
            <exception cref="T:System.ArgumentException">Thrown if there exists no .NET type which maps to this type.</exception>
        </member>
        <member name="M:NtApiDotNet.NtType.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>Returns the type as a string.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypes">
            <summary>
            Get a list of all types.
            </summary>
            <returns>The list of types.</returns>
        </member>
        <member name="M:NtApiDotNet.NtType.GetTypes(System.Boolean)">
            <summary>
            Get a list of all types.
            </summary>
            <param name="cached">True to get the cached list of types, false to return a live list of all types.</param>
            <returns>The list of types.</returns>
        </member>
        <member name="T:NtApiDotNet.OptionalGuid">
            <summary>
            This class allows a function to specify an optional Guid
            </summary>
        </member>
        <member name="F:NtApiDotNet.OptionalGuid.Value">
            <summary>
            Optional Guid
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalGuid.#ctor(System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="guid">The GUID to initialize</param>
        </member>
        <member name="M:NtApiDotNet.OptionalGuid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalGuid.op_Implicit(System.Guid)~NtApiDotNet.OptionalGuid">
            <summary>
            Implicit conversion
            </summary>
            <param name="guid">The value</param>
        </member>
        <member name="T:NtApiDotNet.OptionalInt32">
            <summary>
            This class allows a function to specify an optional int32.
            </summary>
        </member>
        <member name="F:NtApiDotNet.OptionalInt32.Value">
            <summary>
            Optional length
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalInt32.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalInt32.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalInt32.op_Implicit(System.Int32)~NtApiDotNet.OptionalInt32">
            <summary>
            Implicit conversion
            </summary>
            <param name="length">The value</param>
        </member>
        <member name="T:NtApiDotNet.OptionalLength">
            <summary>
            This class allows a function to specify an optional length as a SizeT
            </summary>
        </member>
        <member name="F:NtApiDotNet.OptionalLength.Length">
            <summary>
            Optional length
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalLength.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="length">The length value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalLength.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="length">The length value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalLength.#ctor(System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="length">The length value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalLength.op_Implicit(System.Int32)~NtApiDotNet.OptionalLength">
            <summary>
            Implicit conversion
            </summary>
            <param name="length">The length value</param>
        </member>
        <member name="T:NtApiDotNet.OptionalPointer">
            <summary>
            This class allows a function to specify an optional pointer.
            </summary>
        </member>
        <member name="F:NtApiDotNet.OptionalPointer.Value">
            <summary>
            Optional length
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalPointer.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:NtApiDotNet.OptionalPointer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.OptionalPointer.op_Implicit(System.IntPtr)~NtApiDotNet.OptionalPointer">
            <summary>
            Implicit conversion
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="T:NtApiDotNet.NtProcessMitigations">
            <summary>
            Class representing various process mitigations
            </summary>
        </member>
        <member name="T:NtApiDotNet.SupportedVersion">
            <summary>
            Supported windows verion
            </summary>
        </member>
        <member name="T:NtApiDotNet.SupportedVersionAttribute">
            <summary>
            Attribute to indicate the required version for a function.
            Applied if the function needs a version greater than 7.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SupportedVersionAttribute.Version">
            <summary>
            The supported version.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SupportedVersionAttribute.#ctor(NtApiDotNet.SupportedVersion)">
            <summary>
            Constructor
            </summary>
            <param name="version">The supported version</param>
        </member>
        <member name="T:NtApiDotNet.DataStartAttribute">
            <summary>
            Attribute used for managed structures to indicate the start of data.
            This is used in situations where the data immediately trail 
            </summary>
        </member>
        <member name="M:NtApiDotNet.DataStartAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="field_name">The field name which indicates the first address of data.</param>
        </member>
        <member name="P:NtApiDotNet.DataStartAttribute.FieldName">
            <summary>
            The field name which indicates the first address of data.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SafeHGlobalBuffer">
            <summary>
            A safe handle to an allocated global buffer.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="length">Size of the buffer to allocate.</param>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="allocation_length">The length of data to allocate.</param>
            <param name="total_length">The total length to reflect in the Length property.</param>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="length">Size of the buffer.</param>
            <param name="buffer">An existing pointer to an existing HGLOBAL allocated buffer.</param>
            <param name="owns_handle">Specify whether safe handle owns the buffer.</param>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="data">Initialization data for the buffer.</param>
        </member>
        <member name="P:NtApiDotNet.SafeHGlobalBuffer.LengthIntPtr">
            <summary>
            Get the length as an IntPtr
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.ToArray">
            <summary>
            Convert the safe handle to an array of bytes.
            </summary>
            <returns>The data contained in the allocaiton.</returns>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.ReadNulTerminatedUnicodeString(System.UInt64)">
            <summary>
            Read a NUL terminated string for the byte offset.
            </summary>
            <param name="byte_offset">The byte offset to read from.</param>
            <returns>The string read from the buffer without the NUL terminator</returns>
        </member>
        <member name="M:NtApiDotNet.SafeHGlobalBuffer.ReadNulTerminatedUnicodeString">
            <summary>
            Read a NUL terminated string
            </summary>
            <returns>The string read from the buffer without the NUL terminator</returns>
        </member>
        <member name="T:NtApiDotNet.SafeStructureInOutBuffer`1">
            <summary>
            Safe handle for an in/out structure buffer.
            </summary>
            <typeparam name="T">The type of structure as the base of the memory allocation.</typeparam>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="value">Structure value to initialize the buffer.</param>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.#ctor">
            <summary>
            Constructor, initializes buffer with a default structure.
            </summary>        
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor, initializes buffer with a default structure.
            </summary>        
            <param name="additional_size">Additional data to add to structure buffer.</param>
            <param name="add_struct_size">If true additional_size is added to structure size, otherwise reflects the total size.</param>
        </member>
        <member name="M:NtApiDotNet.SafeStructureInOutBuffer`1.#ctor(`0,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="value">Structure value to initialize the buffer.</param>
            <param name="additional_size">Additional data to add to structure buffer.</param>
            <param name="add_struct_size">If true additional_size is added to structure size, otherwise reflects the total size.</param>
        </member>
        <member name="P:NtApiDotNet.SafeStructureInOutBuffer`1.Result">
            <summary>
            Convert the buffer back to a structure.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeStructureInOutBuffer`1.Data">
            <summary>
            Get a reference to the additional data.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeKernelObjectHandle.Inherit">
            <summary>
            Get or set whether the handle is inheritable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SafeKernelObjectHandle.ProtectFromClose">
            <summary>
            Get or set whether the handle is protected from closing.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SafeArrayBuffer`1">
            <summary>
            Safe buffer to container a list of structures.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SafeArrayBuffer`1.#ctor(`0[])">
            <summary>
            Constructor.
            </summary>
            <param name="array">Array of elements.</param>
        </member>
        <member name="M:NtApiDotNet.SafeArrayBuffer`1.Dispose(System.Boolean)">
            <summary>
            Dispose buffer.
            </summary>
            <param name="disposing">True if disposing.</param>
        </member>
        <member name="T:NtApiDotNet.BufferUtils">
            <summary>
            Some simple utilities to create structure buffers.
            </summary>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.CreateBuffer``1(``0,System.Int32,System.Boolean)">
            <summary>
            Create a buffer based on a passed type.
            </summary>
            <typeparam name="T">The type to use in the structure buffer.</typeparam>
            <param name="value">The value to initialize the buffer with.</param>
            <param name="additional_size">Additional byte data after the structure.</param>
            <param name="add_struct_size">Indicates if additional_size includes the structure size or not.</param>
            <returns>The new structure buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.CreateBuffer``1(``0)">
            <summary>
            Create a buffer based on a passed type.
            </summary>
            <typeparam name="T">The type to use in the structure buffer.</typeparam>
            <param name="value">The value to initialize the buffer with.</param>
            <returns>The new structure buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ToBuffer``1(``0)">
            <summary>
            Create a buffer based on a passed type.
            </summary>
            <typeparam name="T">The type to use in the structure buffer.</typeparam>
            <param name="value">The value to initialize the buffer with.</param>
            <returns>The new structure buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ToBuffer``1(``0,System.Int32,System.Boolean)">
            <summary>
            Create a buffer based on a passed type.
            </summary>
            <typeparam name="T">The type to use in the structure buffer.</typeparam>
            <param name="value">The value to initialize the buffer with.</param>
            <param name="additional_size">Additional byte data after the structure.</param>
            <param name="add_struct_size">Indicates if additional_size includes the structure size or not.</param>
            <returns>The new structure buffer.</returns>
        </member>
        <member name="M:NtApiDotNet.BufferUtils.ToArrayBuffer``1(``0[])">
            <summary>
            Create an array buffer from the array.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="value">The array of elements.</param>
            <returns>The allocated array buffer.</returns>
        </member>
        <member name="T:NtApiDotNet.SafeSidBufferHandle">
            <summary>
            Safe SID buffer.
            </summary>
            <remarks>This is used to return values from the RTL apis which need to be freed using RtlFreeSid</remarks>
        </member>
        <member name="T:NtApiDotNet.SecurityInformation">
            <summary>
            Security information class for security descriptors.
            </summary>
        </member>
        <member name="T:NtApiDotNet.AccessMask">
            <summary>
            Structure for an NT access mask.
            </summary>
        </member>
        <member name="F:NtApiDotNet.AccessMask.Access">
            <summary>
            The access mask's access bits.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AccessMask.#ctor(System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="access">Access bits to use</param>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_Implicit(System.Int32)~NtApiDotNet.AccessMask">
            <summary>
            Implicit conversion from Int32.
            </summary>
            <param name="access">The access enumeration.</param>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_Implicit(System.UInt32)~NtApiDotNet.AccessMask">
            <summary>
            Implicit conversion from UInt32.
            </summary>
            <param name="access">The access enumeration.</param>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_Implicit(System.Enum)~NtApiDotNet.AccessMask">
            <summary>
            Implicit conversion from enumerations.
            </summary>
            <param name="access">The access enumeration.</param>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToGenericAccess">
            <summary>
            Convert access mask to a generic access object.
            </summary>
            <returns>The generic access mask</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToMandatoryLabelPolicy">
            <summary>
            Convert access mask to a mandatory label policy
            </summary>
            <returns>The mandatory label policy</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToSpecificAccess``1">
            <summary>
            Convert to a specific access right.
            </summary>
            <typeparam name="A">The specific access right.</typeparam>
            <returns>The converted value.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToSpecificAccess(System.Type)">
            <summary>
            Convert to a specific access right.
            </summary>
            <param name="enum_type">The type of enumeration to convert to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="P:NtApiDotNet.AccessMask.IsEmpty">
            <summary>
            Get whether this access mask is empty (i.e. it's 0)
            </summary>
        </member>
        <member name="P:NtApiDotNet.AccessMask.HasAccess">
            <summary>
            Get whether this access mask has not access rights, i.e. not empty.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AccessMask.IsAccessGranted(NtApiDotNet.AccessMask)">
            <summary>
            Get whether the current access mask is granted specific permissions.
            </summary>
            <param name="mask">The access mask to check</param>
            <returns>True one or more access granted.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.IsAllAccessGranted(NtApiDotNet.AccessMask)">
            <summary>
            Get whether the current access mask is granted all specific permissions.
            </summary>
            <param name="mask">The access mask to check</param>
            <returns>True access all is granted.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_BitwiseAnd(NtApiDotNet.AccessMask,NtApiDotNet.AccessMask)">
            <summary>
            Bitwise AND operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>The new access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_BitwiseOr(NtApiDotNet.AccessMask,NtApiDotNet.AccessMask)">
            <summary>
            Bitwise OR operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>The new access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_BitwiseAnd(NtApiDotNet.AccessMask,System.UInt32)">
            <summary>
            Bitwise AND operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>The new access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_BitwiseOr(NtApiDotNet.AccessMask,System.UInt32)">
            <summary>
            Bitwise OR operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>The new access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_Equality(NtApiDotNet.AccessMask,NtApiDotNet.AccessMask)">
            <summary>
            Equality operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_Inequality(NtApiDotNet.AccessMask,NtApiDotNet.AccessMask)">
            <summary>
            Inequality operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <param name="mask2">Access mask 2</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.op_OnesComplement(NtApiDotNet.AccessMask)">
            <summary>
            Bitwise NOT operator.
            </summary>
            <param name="mask1">Access mask 1</param>
            <returns>The new access mask.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.GetHashCode">
            <summary>
            Overridden GetHashCode.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NtApiDotNet.AccessMask.Equals(System.Object)">
            <summary>
            Overridden Equals.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="P:NtApiDotNet.AccessMask.Empty">
            <summary>
            Get an empty access mask.
            </summary>
        </member>
        <member name="M:NtApiDotNet.AccessMask.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The access mask.</returns>
        </member>
        <member name="T:NtApiDotNet.GenericMapping">
            <summary>
            Access rights generic mapping.
            </summary>
        </member>
        <member name="F:NtApiDotNet.GenericMapping.GenericRead">
            <summary>
            Mapping for Generic Read
            </summary>
        </member>
        <member name="F:NtApiDotNet.GenericMapping.GenericWrite">
            <summary>
            Mapping for Generic Write
            </summary>
        </member>
        <member name="F:NtApiDotNet.GenericMapping.GenericExecute">
            <summary>
            Mapping for Generic Execute
            </summary>
        </member>
        <member name="F:NtApiDotNet.GenericMapping.GenericAll">
            <summary>
            Mapping for Generic All
            </summary>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.MapMask(NtApiDotNet.AccessMask)">
            <summary>
            Map a generic access mask to a specific one.
            </summary>
            <param name="mask">The generic mask to map.</param>
            <returns>The mapped mask.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.HasRead(NtApiDotNet.AccessMask)">
            <summary>
            Get whether this generic mapping gives read access.
            </summary>
            <param name="mask">The mask to check against.</param>
            <returns>True if we have read access.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.HasWrite(NtApiDotNet.AccessMask)">
            <summary>
            Get whether this generic mapping gives write access.
            </summary>
            <param name="mask">The mask to check against.</param>
            <returns>True if we have write access.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.HasExecute(NtApiDotNet.AccessMask)">
            <summary>
            Get whether this generic mapping gives execute access.
            </summary>
            <param name="mask">The mask to check against.</param>
            <returns>True if we have execute access.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.HasAll(NtApiDotNet.AccessMask)">
            <summary>
            Get whether this generic mapping gives all access.
            </summary>
            <param name="mask">The mask to check against.</param>
            <returns>True if we have all access.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.UnmapMask(NtApiDotNet.AccessMask)">
            <summary>
            Try and unmap access mask to generic rights.
            </summary>
            <param name="mask">The mask to unmap.</param>
            <returns>The unmapped mask. Any access which can be generic mapped is left in the mask as specific rights.</returns>
        </member>
        <member name="M:NtApiDotNet.GenericMapping.ToString">
            <summary>
            Convert generic mapping to a string.
            </summary>
            <returns>The generic mapping as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.Ace">
            <summary>
            Class to represent an Access Control Entry (ACE)
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.IsObjectAce">
            <summary>
            Check if the ACE is an Object ACE
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.IsCallbackAce">
            <summary>
            Check if the ACE is a callback ACE
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.IsConditionalAce">
            <summary>
            Check if ACE is a conditional ACE
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.AceType">
            <summary>
            Get ACE type
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.AceFlags">
            <summary>
            Get ACE flags
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.Mask">
            <summary>
            Get ACE access mask
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.Sid">
            <summary>
            Get ACE Security Identifier
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.ObjectType">
            <summary>
            Get optional Object Type
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.InheritedObjectType">
            <summary>
            Get optional Inherited Object Type
            </summary>
        </member>
        <member name="P:NtApiDotNet.Ace.ApplicationData">
            <summary>
            Optional application data.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Ace.ToString">
            <summary>
            Convert ACE to a string
            </summary>
            <returns>The ACE as a string</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.ToString(System.Type,System.Boolean)">
            <summary>
            Convert ACE to a string
            </summary>
            <param name="access_rights_type">An enumeration type to format the access mask</param>
            <param name="resolve_sid">True to try and resolve SID to a name</param>
            <returns>The ACE as a string</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.Equals(System.Object)">
            <summary>
            Compare ACE to another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other object equals this ACE</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.op_Equality(NtApiDotNet.Ace,NtApiDotNet.Ace)">
            <summary>
            Equality operator
            </summary>
            <param name="a">Left ACE</param>
            <param name="b">Right ACE</param>
            <returns>True if the ACEs are equal</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.op_Inequality(NtApiDotNet.Ace,NtApiDotNet.Ace)">
            <summary>
            Not Equal operator
            </summary>
            <param name="a">Left ACE</param>
            <param name="b">Right ACE</param>
            <returns>True if the ACEs are not equal</returns>
        </member>
        <member name="M:NtApiDotNet.Ace.#ctor(NtApiDotNet.AceType,NtApiDotNet.AceFlags,NtApiDotNet.AccessMask,NtApiDotNet.Sid)">
            <summary>
            Constructor
            </summary>
            <param name="type">ACE type</param>
            <param name="flags">ACE flags</param>
            <param name="mask">ACE access mask</param>
            <param name="sid">ACE sid</param>
        </member>
        <member name="T:NtApiDotNet.Acl">
            <summary>
            Class to represent an Access Control List (ACL)
            </summary>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="acl">Pointer to a raw ACL in memory</param>
            <param name="defaulted">True if the ACL was defaulted</param>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor(System.Boolean)">
            <summary>
            Constructor for a NULL ACL
            </summary>
            <param name="defaulted">True if the ACL was defaulted</param>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor">
            <summary>
            Constructor for an empty ACL
            </summary>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor(System.Collections.Generic.IEnumerable{NtApiDotNet.Ace},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="aces">List of ACEs to add to ACL</param>
            <param name="defaulted">True if the ACL was defaulted</param>
        </member>
        <member name="M:NtApiDotNet.Acl.#ctor(System.Collections.Generic.IEnumerable{NtApiDotNet.Ace})">
            <summary>
            Constructor
            </summary>
            <param name="aces">List of ACEs to add to ACL</param>
        </member>
        <member name="P:NtApiDotNet.Acl.Defaulted">
            <summary>
            Get or set whether the ACL was defaulted
            </summary>
        </member>
        <member name="P:NtApiDotNet.Acl.NullAcl">
            <summary>
            Get or set whether the ACL is NULL (no security)
            </summary>
        </member>
        <member name="P:NtApiDotNet.Acl.Revision">
            <summary>
            Get or set the ACL revision
            </summary>
        </member>
        <member name="M:NtApiDotNet.Acl.ToByteArray">
            <summary>
            Convert the ACL to a byte array
            </summary>
            <returns>The ACL as a byte array</returns>
        </member>
        <member name="M:NtApiDotNet.Acl.ToSafeBuffer">
            <summary>
            Convert the ACL to a safe buffer
            </summary>
            <returns>The safe buffer</returns>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,System.String)">
            <summary>
            Add an access allowed ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessAllowedAce(NtApiDotNet.AccessMask,System.String)">
            <summary>
            Add an access allowed ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,NtApiDotNet.Sid)">
            <summary>
            Add an access allowed ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.Sid)">
            <summary>
            Add an access allowed ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,System.String)">
            <summary>
            Add an access denied ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessDeniedAce(NtApiDotNet.AccessMask,System.String)">
            <summary>
            Add an access denied ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,NtApiDotNet.Sid)">
            <summary>
            Add an access denied ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.Sid)">
            <summary>
            Add an access denied ace to the ACL
            </summary>
            <param name="mask">The ACE access mask</param>
            <param name="sid">The ACE SID</param>
        </member>
        <member name="M:NtApiDotNet.Acl.IsCanonical">
            <summary>
            Gets an indication if this ACL is canonical.
            </summary>
            <remarks>Canonical basically means that deny ACEs are before allow ACEs.</remarks>
            <returns>True if the ACL is canonical.</returns>
        </member>
        <member name="M:NtApiDotNet.Acl.Canonicalize">
            <summary>
            Canonicalize the ACL (for use on DACLs only).
            </summary>
            <remarks>This isn't a general purpose algorithm, for example it doesn't worry much about object ordering.
            Also it can be lossy, if it doesn't understand an ACE type it will drop it.</remarks>
            <returns>The canonical ACL.</returns>
        </member>
        <member name="T:NtApiDotNet.NtSecurity">
            <summary>
            Static class to access NT security manager routines.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupAccountSid(NtApiDotNet.Sid)">
            <summary>
            Looks up the account name of a SID. 
            </summary>
            <param name="sid">The SID to lookup</param>
            <returns>The name, or null if the lookup failed</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupKnownCapabilityName(NtApiDotNet.Sid)">
            <summary>
            Looks up a capability SID to see if it's already known.
            </summary>
            <param name="sid">The capability SID to lookup</param>
            <returns>The name of the capability, null if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupAccountName(System.String)">
            <summary>
            Lookup a SID from a username.
            </summary>
            <param name="username">The username, can be in the form domain\account.</param>
            <returns>The Security Identifier</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if account cannot be found.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupProcessTrustName(NtApiDotNet.Sid)">
            <summary>
            Lookup the name of a process trust SID.
            </summary>
            <param name="trust_sid">The trust sid to lookup.</param>
            <returns>The name of the trust sid. null if not found.</returns>
            <exception cref="T:System.ArgumentException">Thrown if trust_sid is not a trust sid.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.LookupPackageName(NtApiDotNet.Sid)">
            <summary>
            Try and lookup the moniker associated with a package sid.
            </summary>
            <param name="sid">The package sid.</param>
            <returns>Returns the moniker name. If not found returns null.</returns>
            <exception cref="T:System.ArgumentException">Thrown if SID is not a package sid.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.SecurityDescriptorToSddl(System.Byte[],NtApiDotNet.SecurityInformation)">
            <summary>
            Convert a security descriptor to SDDL string
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="security_information">Indicates what parts of the security descriptor to include</param>
            <returns>The SDDL string</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot convert to a SDDL string.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.SddlToSecurityDescriptor(System.String)">
            <summary>
            Convert an SDDL string to a binary security descriptor
            </summary>
            <param name="sddl">The SDDL string</param>
            <returns>The binary security descriptor</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot convert from a SDDL string.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.SidFromSddl(System.String)">
            <summary>
            Convert an SDDL SID string to a Sid
            </summary>
            <param name="sddl">The SDDL SID string</param>
            <returns>The converted Sid</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if cannot convert from a SDDL string.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetAllowedAccess(NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtToken,NtApiDotNet.AccessMask,NtApiDotNet.Sid,NtApiDotNet.GenericMapping)">
            <summary>
            Do an access check between a security descriptor and a token to determine the allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="access_rights">The set of access rights to check against</param>
            <param name="principal">An optional principal SID used to replace the SELF SID in a security descriptor.</param>
            <param name="generic_mapping">The type specific generic mapping (get from corresponding NtType entry).</param>
            <returns>The allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetAllowedAccess(NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtToken,NtApiDotNet.AccessMask,NtApiDotNet.GenericMapping)">
            <summary>
            Do an access check between a security descriptor and a token to determine the allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="access_rights">The set of access rights to check against</param>
            <param name="generic_mapping">The type specific generic mapping (get from corresponding NtType entry).</param>
            <returns>The allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetMaximumAccess(NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtToken,NtApiDotNet.GenericMapping)">
            <summary>
            Do an access check between a security descriptor and a token to determine the maximum allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="generic_mapping">The type specific generic mapping (get from corresponding NtType entry).</param>
            <returns>The maximum allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetMaximumAccess(NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtToken,NtApiDotNet.Sid,NtApiDotNet.GenericMapping)">
            <summary>
            Do an access check between a security descriptor and a token to determine the maximum allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="principal">An optional principal SID used to replace the SELF SID in a security descriptor.</param>
            <param name="generic_mapping">The type specific generic mapping (get from corresponding NtType entry).</param>
            <returns>The maximum allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetAllowedAccess(NtApiDotNet.NtToken,NtApiDotNet.NtType,NtApiDotNet.AccessMask,System.Byte[])">
            <summary>
            Do an access check between a security descriptor and a token to determine the allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="access_rights">The set of access rights to check against</param>
            <param name="type">The type used to determine generic access mapping..</param>
            <returns>The allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetMaximumAccess(NtApiDotNet.NtToken,NtApiDotNet.NtType,System.Byte[])">
            <summary>
            Do an access check between a security descriptor and a token to determine the maximum allowed access.
            </summary>
            <param name="sd">The security descriptor</param>
            <param name="token">The access token.</param>
            <param name="type">The type used to determine generic access mapping..</param>
            <returns>The allowed access mask as a unsigned integer.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred in the access check.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.FromNamedObject(System.String,System.String)">
            <summary>
            Get a security descriptor from a named object.
            </summary>
            <param name="name">The path to the resource (such as \BaseNamedObejct\ABC)</param>
            <param name="type">The type of resource, can be null to get the method to try and discover the correct type.</param>
            <returns>The named resource security descriptor.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if an error occurred opening the object.</exception>
            <exception cref="T:System.ArgumentException">Thrown if type of resource couldn't be found.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetIntegritySidRaw(System.Int32)">
            <summary>
            Get a SID for a specific mandatory integrity level.
            </summary>
            <param name="level">The mandatory integrity level.</param>
            <returns>The integrity SID</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetIntegritySid(NtApiDotNet.TokenIntegrityLevel)">
            <summary>
            Get a SID for a specific mandatory integrity level.
            </summary>
            <param name="level">The mandatory integrity level.</param>
            <returns>The integrity SID</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsIntegritySid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is an integrity level SID
            </summary>
            <param name="sid">The SID to check</param>
            <returns>True if an integrity SID</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetIntegrityLevel(NtApiDotNet.Sid)">
            <summary>
            Get the integrity level from an integrity SID
            </summary>
            <param name="sid">The integrity SID</param>
            <returns>The token integrity level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetServiceSid(System.String)">
            <summary>
            Gets the SID for a service name.
            </summary>
            <param name="service_name">The service name.</param>
            <returns>The service SID.</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown on error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsServiceSid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is a service SID.
            </summary>
            <param name="sid">The sid to check.</param>
            <returns>True if a service sid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsProcessTrustSid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is a process trust SID.
            </summary>
            <param name="sid">The sid to check.</param>
            <returns>True if a process trust sid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsCapabilitySid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is a capability SID.
            </summary>
            <param name="sid">The sid to check.</param>
            <returns>True if a capability sid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetCapabilitySid(System.String)">
            <summary>
            Get a capability sid by name.
            </summary>
            <param name="capability_name">The name of the capability.</param>
            <returns>The capability SID.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetCapabilityGroupSid(System.String)">
            <summary>
            Get a capability group sid by name.
            </summary>
            <param name="capability_name">The name of the capability.</param>
            <returns>The capability SID.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetPackageSidType(NtApiDotNet.Sid)">
            <summary>
            Get the type of package sid.
            </summary>
            <param name="sid">The sid to get type.</param>
            <returns>The package sid type, Unknown if invalid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.IsPackageSid(NtApiDotNet.Sid)">
            <summary>
            Checks if a SID is a valid package SID.
            </summary>
            <param name="sid">The sid to check.</param>
            <returns>True if a capability sid.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetPackageSidParent(NtApiDotNet.Sid)">
            <summary>
            Get the parent package SID for a child package SID.
            </summary>
            <param name="sid">The child package SID.</param>
            <returns>The parent package SID.</returns>
            <exception cref="T:System.ArgumentException">Thrown if sid not a child package SID.</exception>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.ConditionalAceToString(System.Byte[])">
            <summary>
            Converts a conditional ACE to an SDDL string
            </summary>
            <param name="conditional_data">The conditional application data.</param>
            <returns>The conditional ACE string.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.GetCachedSigningLevel(NtApiDotNet.SafeKernelObjectHandle)">
            <summary>
            Get the cached signing level for a file.
            </summary>
            <param name="handle">The handle to the file to query.</param>
            <returns>The cached signing level.</returns>
        </member>
        <member name="M:NtApiDotNet.NtSecurity.SetCachedSigningLevel(NtApiDotNet.SafeKernelObjectHandle,System.Int32,NtApiDotNet.SigningLevel,System.Collections.Generic.IEnumerable{NtApiDotNet.SafeKernelObjectHandle},System.String)">
            <summary>
            Set the cached signing level for a file.
            </summary>
            <param name="handle">The handle to the file to set the cache on.</param>
            <param name="flags">Flags to set for the cache.</param>
            <param name="signing_level">The signing level to cache</param>
            <param name="source_files">A list of source file for the cache.</param>
            <param name="name">Optional name for the cache.</param>
        </member>
        <member name="T:NtApiDotNet.SecurityDescriptorControl">
            <summary>
            Security descriptor control flags.
            </summary>
        </member>
        <member name="T:NtApiDotNet.SecurityDescriptorSid">
            <summary>
            A security descriptor SID which maintains defaulted state.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptorSid.Sid">
            <summary>
            The SID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptorSid.Defaulted">
            <summary>
            Indicates whether the SID was defaulted or not.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptorSid.#ctor(NtApiDotNet.Sid,System.Boolean)">
            <summary>
            Constructor from existing SID.
            </summary>
            <param name="sid">The SID.</param>
            <param name="defaulted">Whether the SID was defaulted or not.</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptorSid.ToString">
            <summary>
            Convert to a string.
            </summary>
            <returns>The string form of the SID</returns>
        </member>
        <member name="T:NtApiDotNet.SecurityDescriptor">
            <summary>
            Security descriptor.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Dacl">
            <summary>
            Discretionary access control list (can be null)
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Sacl">
            <summary>
            System access control list (can be null)
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Owner">
            <summary>
            Owner (can be null)
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Group">
            <summary>
            Group (can be null)
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Control">
            <summary>
            Control flags
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.Revision">
            <summary>
            Revision value
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.MandatoryLabel">
            <summary>
            Get or set mandatory label. Returns a medium label if the it doesn't exist.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SecurityDescriptor.IntegrityLevel">
            <summary>
            Get or set the integrity level
            </summary>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="ptr">Native pointer to security descriptor.</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="security_descriptor">Binary form of security descriptor</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(NtApiDotNet.NtToken)">
            <summary>
            Constructor from a token default DACL and ownership values.
            </summary>
            <param name="token">The token to use for its default DACL</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(NtApiDotNet.NtObject,NtApiDotNet.NtToken,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="base_object">Base object for security descriptor</param>
            <param name="token">Token for determining user rights</param>
            <param name="is_directory">True if a directory security descriptor</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.#ctor(System.String)">
            <summary>
            Constructor from an SDDL string
            </summary>
            <param name="sddl">The SDDL string</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown if invalid SDDL</exception>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToByteArray">
            <summary>
            Convert security descriptor to a byte array
            </summary>
            <returns>The binary security descriptor</returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToSddl(NtApiDotNet.SecurityInformation)">
            <summary>
            Convert security descriptor to SDDL string
            </summary>
            <param name="security_information">The parts of the security descriptor to return</param>
            <returns>The SDDL string</returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToSddl">
            <summary>
            Convert security descriptor to SDDL string
            </summary>
            <returns>The SDDL string</returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The security descriptor as an SDDL string.</returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.ToSafeBuffer">
            <summary>
            Convert security descriptor to a safe buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,System.String)">
            <summary>
            Add an access allowed ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The SID in SDDL form</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessAllowedAce(NtApiDotNet.AccessMask,System.String)">
            <summary>
            Add an access allowed ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="sid">The SID in SDDL form</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,NtApiDotNet.Sid)">
            <summary>
            Add an access allowed ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The SID</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessAllowedAce(NtApiDotNet.AccessMask,NtApiDotNet.Sid)">
            <summary>
            Add an access allowed ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="sid">The SID</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,System.String)">
            <summary>
            Add an access denied ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The SID in SDDL form</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessDeniedAce(NtApiDotNet.AccessMask,System.String)">
            <summary>
            Add an access denied ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="sid">The SID in SDDL form</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.Sid)">
            <summary>
            Add an access denied ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="sid">The SID</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddAccessDeniedAce(NtApiDotNet.AccessMask,NtApiDotNet.AceFlags,NtApiDotNet.Sid)">
            <summary>
            Add an access denied ACE to the DACL
            </summary>
            <param name="mask">The access mask</param>
            <param name="flags">The ACE flags</param>
            <param name="sid">The SID</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddMandatoryLabel(NtApiDotNet.TokenIntegrityLevel)">
            <summary>
            Add mandatory integrity label to SACL
            </summary>
            <param name="level">The integrity level</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddMandatoryLabel(NtApiDotNet.TokenIntegrityLevel,NtApiDotNet.MandatoryLabelPolicy)">
            <summary>
            Add mandatory integrity label to SACL
            </summary>
            <param name="level">The integrity level</param>
            <param name="policy">The mandatory label policy</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddMandatoryLabel(NtApiDotNet.TokenIntegrityLevel,NtApiDotNet.AceFlags,NtApiDotNet.MandatoryLabelPolicy)">
            <summary>
            Add mandatory integrity label to SACL
            </summary>
            <param name="level">The integrity level</param>
            <param name="flags">The ACE flags.</param>
            <param name="policy">The mandatory label policy</param>
        </member>
        <member name="M:NtApiDotNet.SecurityDescriptor.AddMandatoryLabel(NtApiDotNet.Sid,NtApiDotNet.AceFlags,NtApiDotNet.MandatoryLabelPolicy)">
            <summary>
            Add mandatory integrity label to SACL
            </summary>
            <param name="label">The integrity label SID</param>
            <param name="flags">The ACE flags.</param>
            <param name="policy">The mandatory label policy</param>
        </member>
        <member name="T:NtApiDotNet.SecurityAuthority">
            <summary>
            Predefined security authorities
            </summary>
        </member>
        <member name="T:NtApiDotNet.SidIdentifierAuthority">
            <summary>
            Represents an identifier authority for a SID.
            </summary>
        </member>
        <member name="P:NtApiDotNet.SidIdentifierAuthority.Value">
            <summary>
            Get a reference to the identifier authority. This can be used to modify the value
            </summary>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.#ctor(System.Byte[])">
            <summary>
            Construct from an existing authority array.
            </summary>
            <param name="authority">The authority, must be 6 bytes in length.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if authority is not the correct length.</exception>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.#ctor(NtApiDotNet.SecurityAuthority)">
            <summary>
            Constructor from a simple predefined authority.
            </summary>
            <param name="authority">The predefined authority.</param>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.Equals(System.Object)">
            <summary>
            Compares authority to another.
            </summary>
            <param name="obj">The other authority to compare against.</param>
            <returns>True if authority is equal.</returns>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns>The authority hash code.</returns>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.IsAuthority(NtApiDotNet.SecurityAuthority)">
            <summary>
            Determines if this is a specific security authority.
            </summary>
            <param name="authority">The security authority.</param>
            <returns>True if the security authority.</returns>
        </member>
        <member name="M:NtApiDotNet.SidIdentifierAuthority.ToString">
            <summary>
            Overridden ToString method.
            </summary>
            <returns>The security authority as a string.</returns>
        </member>
        <member name="T:NtApiDotNet.Sid">
            <summary>
            Class to represent a Security Identifier.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Sid.Authority">
            <summary>
            The SIDs authority.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Sid.SubAuthorities">
            <summary>
            List of the SIDs sub authorities.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(NtApiDotNet.SidIdentifierAuthority,System.UInt32[])">
            <summary>
            Constructor for authority and sub authorities.
            </summary>
            <param name="authority">The identifier authority.</param>
            <param name="sub_authorities">The sub authorities.</param>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(NtApiDotNet.SecurityAuthority,System.UInt32[])">
            <summary>
            Constructor for authority and sub authorities.
            </summary>
            <param name="authority">The identifier authority.</param>
            <param name="sub_authorities">The sub authorities.</param>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(System.IntPtr)">
            <summary>
            Constructor from an unmanged buffer.
            </summary>
            <param name="sid">A pointer to a buffer containing a valid SID.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown if the buffer is not valid.</exception>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(System.Runtime.InteropServices.SafeBuffer)">
            <summary>
            Constructor from an unmanged buffer.
            </summary>
            <param name="sid">A safe buffer containing a valid SID.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown if the buffer is not valid.</exception>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(NtApiDotNet.SafeSidBufferHandle)">
            <summary>
            Constructor from a safe SID handle.
            </summary>
            <param name="sid">A safe SID handle containing a valid SID.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown if the buffer is not valid.</exception>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(System.Byte[])">
            <summary>
            Constructor from an manged buffer.
            </summary>
            <param name="sid">A buffer containing a valid SID.</param>
            <exception cref="T:NtApiDotNet.NtException">Thrown if the buffer is not valid.</exception>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(NtApiDotNet.Sid)">
            <summary>
            Constructor from existing Sid.
            </summary>
            <param name="sid">The existing Sid.</param>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(System.String)">
            <summary>
            Constructor from an SDDL string.
            </summary>
            <param name="sid">The SID in SDDL format.</param>
            <example>
            new Sid("S-1-0-0");
            new Sid("WD");
            </example>
            <seealso cref="M:NtApiDotNet.NtSecurity.LookupAccountName(System.String)"/>
        </member>
        <member name="M:NtApiDotNet.Sid.#ctor(System.IO.BinaryReader)">
            <summary>
            Construct a SID from a binary reader.
            </summary>
            <param name="reader">The binary reader.</param>
        </member>
        <member name="M:NtApiDotNet.Sid.ToSafeBuffer">
            <summary>
            Convert the SID to a safe buffer.
            </summary>
            <returns>The safe buffer containing the SID.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.ToArray">
            <summary>
            Convert to a managed byte array.
            </summary>
            <returns>The managed byte array.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.EqualPrefix(NtApiDotNet.Sid)">
            <summary>
            Compares two sids to see if their prefixes are the same.
            </summary>
            <param name="sid">The sid to compare against</param>
            <returns>True if the sids share a prefix.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.Equals(System.Object)">
            <summary>
            Compare two Sids.
            </summary>
            <param name="obj">The other Sid to compare.</param>
            <returns>True if the Sids are equal.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.op_Equality(NtApiDotNet.Sid,NtApiDotNet.Sid)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">Sid 1</param>
            <param name="b">Sid 2</param>
            <returns>True if the Sids are equal.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.op_Inequality(NtApiDotNet.Sid,NtApiDotNet.Sid)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">Sid 1</param>
            <param name="b">Sid 2</param>
            <returns>True if the Sids are not equal.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NtApiDotNet.Sid.ToString">
            <summary>
            Convert to an SDDL format string.
            </summary>
            <returns>The SDDL format string (e.g. S-1-1-0)</returns>
        </member>
        <member name="P:NtApiDotNet.Sid.Name">
            <summary>
            Get the account name of the SID or the SDDL form is no corresponding name.
            </summary>
        </member>
        <member name="T:NtApiDotNet.KnownSidValue">
            <summary>
            An enumeration to reference a known SID.
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Null">
            <summary>
            NULL SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.World">
            <summary>
            Everyone SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Local">
            <summary>
            Local user SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CreatorOwner">
            <summary>
            CREATOR OWNER SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CreatorGroup">
            <summary>
            CREATOR GROUP SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Service">
            <summary>
            Service SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Anonymous">
            <summary>
            ANONYMOUS LOGON SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.AuthenticatedUsers">
            <summary>
            Authenticated Users SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Restricted">
            <summary>
            RESTRICTED SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.LocalSystem">
            <summary>
            LOCAL SYSTEM SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.LocalService">
            <summary>
            LOCAL SERVICE SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.NetworkService">
            <summary>
            NETWORK SERVICE SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.AllApplicationPackages">
            <summary>
            APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES SID
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.AllRestrictedApplicationPackages">
            <summary>
            APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.TrustedInstaller">
            <summary>
            NT SERVICE\TrustedInstaller
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.BuiltinUsers">
            <summary>
            BUILTIN\Users
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.BuiltinAdministrators">
            <summary>
            BUILTIN\Administrators
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityInternetClient">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Internet connection
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityInternetClientServer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Internet connection, including incoming connections from the Internet
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityPrivateNetworkClientServer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your home or work networks
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityPicturesLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your pictures library
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityVideosLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your videos library
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityMusicLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your music library
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityDocumentsLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your documents library
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityEnterpriseAuthentication">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Windows credentials
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilitySharedUserCertificates">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Software and hardware certificates or a smart card
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityRemovableStorage">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Removable storage
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityAppointments">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Appointments
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityContacts">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Contacts
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityInternetExplorer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Internet Explorer
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.CapabilityConstrainedImpersonation">
            <summary>
            Constrained Impersonation Capability
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.OwnerRights">
            <summary>
            OWNER RIGHTS
            </summary>
        </member>
        <member name="F:NtApiDotNet.KnownSidValue.Self">
            <summary>
            NT AUTHORITY\SELF
            </summary>
        </member>
        <member name="T:NtApiDotNet.KnownSids">
            <summary>
            Static methods to get some known SIDs.
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.Null">
            <summary>
            NULL SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.World">
            <summary>
            Everyone SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.Local">
            <summary>
            Local user SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CreatorOwner">
            <summary>
            CREATOR OWNER SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CreatorGroup">
            <summary>
            CREATOR GROUP SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.Service">
            <summary>
            Service SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.Anonymous">
            <summary>
            ANONYMOUS LOGON SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.AuthenticatedUsers">
            <summary>
            Authenticated Users SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.Restricted">
            <summary>
            RESTRICTED SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.LocalSystem">
            <summary>
            LOCAL SYSTEM SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.LocalService">
            <summary>
            LOCAL SERVICE SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.NetworkService">
            <summary>
            NETWORK SERVICE SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.AllApplicationPackages">
            <summary>
            APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES SID
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.AllRestrictedApplicationPackages">
            <summary>
            APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.TrustedInstaller">
            <summary>
            NT SERVICE\TrustedInstaller
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.BuiltinUsers">
            <summary>
            BUILTIN\Users
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.BuiltinAdministrators">
            <summary>
            BUILTIN\Administrators
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityInternetClient">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Internet connection
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityInternetClientServer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Internet connection, including incoming connections from the Internet
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityPrivateNetworkClientServer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your home or work networks
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityPicturesLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your pictures library
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityVideosLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your videos library
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityMusicLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your music library
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityDocumentsLibrary">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your documents library
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityEnterpriseAuthentication">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Windows credentials
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilitySharedUserCertificates">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Software and hardware certificates or a smart card
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityRemovableStorage">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Removable storage
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityAppointments">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Appointments
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityContacts">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Your Contacts
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityInternetExplorer">
            <summary>
            APPLICATION PACKAGE AUTHORITY\Internet Explorer
            </summary>
        </member>
        <member name="P:NtApiDotNet.KnownSids.CapabilityConstrainedImpersonation">
            <summary>
            Constrained Impersonation Capability
            </summary>
        </member>
        <member name="M:NtApiDotNet.KnownSids.GetKnownSid(NtApiDotNet.KnownSidValue)">
            <summary>
            Get a known SID based on a specific enumeration.
            </summary>
            <param name="sid">The enumerated sid value.</param>
            <returns></returns>
        </member>
        <member name="T:NtApiDotNet.ThreadImpersonationContext">
            <summary>
            Disposable class to scope an impersonation context.
            </summary>
        </member>
        <member name="M:NtApiDotNet.ThreadImpersonationContext.Revert">
            <summary>
            Revert impersonation back to the current user.
            </summary>
        </member>
        <member name="T:NtApiDotNet.UnicodeString">
            <summary>
            Standard UNICODE_STRING class
            </summary>
        </member>
        <member name="T:NtApiDotNet.UnicodeStringOut">
            <summary>
            This class is used when the UNICODE_STRING is an output parameter.
            The allocatation of the buffer is handled elsewhere.
            </summary>
        </member>
        <member name="T:NtApiDotNet.UnicodeStringIn">
            <summary>
            Structure to use when passing in a unicode string as a sub-structure.
            </summary>
        </member>
        <member name="T:NtApiDotNet.UnicodeStringAllocated">
            <summary>
            This class is used when the UNICODE_STRING needs to be preallocated
            and then returned back from a caller.
            </summary>
        </member>
        <member name="T:NtApiDotNet.NtObjectUtils">
            <summary>
            Static utility methods.
            </summary>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.SafeHandleToArray(System.Runtime.InteropServices.SafeHandle,System.Int32)">
            <summary>
            Convert the safe handle to an array of bytes.
            </summary>
            <returns>The data contained in the allocaiton.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.ToNtException(NtApiDotNet.NtStatus)">
            <summary>
            Convert an NtStatus to an exception if the status is an error
            </summary>
            <param name="status">The NtStatus</param>
            <returns>The original NtStatus if not an error</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if status is an error.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.ToNtException(NtApiDotNet.NtStatus,System.Boolean)">
            <summary>
            Convert an NtStatus to an exception if the status is an error and throw_on_error is true.
            </summary>
            <param name="status">The NtStatus</param>
            <param name="throw_on_error">True to throw an exception onerror.</param>
            <returns>The original NtStatus if not thrown</returns>
            <exception cref="T:NtApiDotNet.NtException">Thrown if status is an error and throw_on_error is true.</exception>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.IsSuccess(NtApiDotNet.NtStatus)">
            <summary>
            Checks if the NtStatus value is a success
            </summary>
            <param name="status">The NtStatus value</param>
            <returns>True if a success</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.GetNtStatusMessage(NtApiDotNet.NtStatus)">
            <summary>
            Convert an NTSTATUS to a message description.
            </summary>
            <param name="status">The status to convert.</param>
            <returns>The message description, or an empty string if not found.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.ConvertIntToNtStatus(System.Int32)">
            <summary>
            Convert an integer to an NtStatus code.
            </summary>
            <param name="status">The integer status.</param>
            <returns>The converted code.</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.AccessRightsToString(System.Type,NtApiDotNet.AccessMask)">
            <summary>
            Convert an access rights type to a string.
            </summary>
            <param name="t">The enumeration type for the string conversion</param>
            <param name="access">The access mask to convert</param>
            <returns>The string version of the access</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.AccessRightsToString(System.Enum)">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <param name="access">The access rights</param>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.GrantedAccessAsString(NtApiDotNet.AccessMask,NtApiDotNet.GenericMapping,System.Type,System.Boolean)">
            <summary>
            Convert an enumerable access rights to a string
            </summary>
            <param name="granted_access">The granted access mask.</param>
            <param name="generic_mapping">Generic mapping for object type.</param>
            <param name="enum_type">Enum type to convert to string.</param>
            <param name="map_to_generic">True to try and convert to generic rights where possible.</param>
            <returns>The string format of the access rights</returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.ToDisposableList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert an IEnumerable to a Disposable List.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.NtObjectUtils.CreateResult``1(NtApiDotNet.NtStatus,System.Boolean,System.Func{``0})">
            <summary>
            Create an NT result object. If status is successful then call function otherwise use default value.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="status">The associated status case.</param>
            <param name="throw_on_error">Throw an exception on error.</param>
            <param name="create_func">Function to call to create an instance of the result</param>
            <returns>The created result.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.ExecutableManifest">
            <summary>
            Contains information about a manifest file.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.ParseError">
            <summary>
            True if parsing the XML manifest failed.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.FullPath">
            <summary>
            Full path to the manifest location.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.Name">
            <summary>
            The name of the manifest.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.UiAccess">
            <summary>
            True if the manifest indicates UI access.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.ExecutionLevel">
            <summary>
            The execution level from the manifest.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.AutoElevate">
            <summary>
            True if the manifest indicates auto elevation.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ExecutableManifest.ManifestXml">
            <summary>
            The manifest XML.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.ExecutableManifest.GetManifests(System.String)">
            <summary>
            Get the manifests from a file.
            </summary>
            <param name="filename">The file to extract the manifests from.</param>
            <returns>The list of manifests.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.SecurityLogonType">
            <summary>
            Logon type
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.UndefinedLogonType">
            <summary>
            This is used to specify an undefined logon type
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Interactive">
            <summary>
            Interactively logged on (locally or remotely)
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Network">
            <summary>
            Accessing system via network
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Batch">
            <summary>
            Started via a batch queue
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Service">
            <summary>
            Service started by service controller
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Proxy">
            <summary>
            Proxy logon
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.Unlock">
            <summary>
            Unlock workstation
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.NetworkCleartext">
            <summary>
            Network logon with cleartext credentials
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SecurityLogonType.NewCredentials">
            <summary>
            Clone caller, new default credentials
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.LogonUtils">
            <summary>
            Utilities for user logon.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.LogonUtils.Logon(System.String,System.String,System.String,NtApiDotNet.Win32.SecurityLogonType)">
            <summary>
            Logon a user with a username and password.
            </summary>
            <param name="user">The username.</param>
            <param name="domain">The user's domain.</param>
            <param name="password">The user's password.</param>
            <param name="type">The type of logon token.</param>
            <returns>The logged on token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.LogonUtils.Logon(System.String,System.String,System.String,NtApiDotNet.Win32.SecurityLogonType,System.Collections.Generic.IEnumerable{NtApiDotNet.UserGroup})">
            <summary>
            Logon a user with a username and password.
            </summary>
            <param name="user">The username.</param>
            <param name="domain">The user's domain.</param>
            <param name="password">The user's password.</param>
            <param name="type">The type of logon token.</param>
            <param name="groups">Additional groups to add. Needs SeTcbPrivilege.</param>
            <returns>The logged on token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.LogonUtils.LogonS4U(System.String,System.String,NtApiDotNet.Win32.SecurityLogonType)">
            <summary>
            Logon user using S4U
            </summary>
            <param name="user">The username.</param>
            <param name="realm">The user's realm.</param>
            <param name="type">The type of logon token.</param>
            <returns>The logged on token.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.SecurityUtils">
            <summary>
            Utilities for Win32 security APIs.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.SecurityUtils.EditSecurity(System.IntPtr,NtApiDotNet.NtObject,System.String,System.Boolean)">
            <summary>
            Display the edit security dialog.
            </summary>
            <param name="hwnd">Parent window handle.</param>
            <param name="handle">NT object to display the security.</param>
            <param name="object_name">The name of the object to display.</param>
            <param name="read_only">True to force the UI to read only.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.SecurityUtils.EditSecurity(System.IntPtr,System.String,NtApiDotNet.SecurityDescriptor,NtApiDotNet.NtType)">
            <summary>
            Display the edit security dialog.
            </summary>
            <param name="hwnd">Parent window handle.</param>
            <param name="name">The name of the object to display.</param>
            <param name="sd">The security descriptor to display.</param>
            <param name="type">The NT type of the object.</param>
        </member>
        <member name="T:NtApiDotNet.Win32.LoadLibraryFlags">
            <summary>
            Flags for loading a library.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.DontResolveDllReferences">
            <summary>
            Don't resolve DLL references
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadIgnoreCodeAuthzLevel">
            <summary>
            Ignore code authz level.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibraryAsDataFile">
            <summary>
            Load library as a data file.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibraryAsDataFileExclusive">
            <summary>
            Load library as a data file exclusively.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadLibraryAsImageResource">
            <summary>
            Load library as an image resource.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.LoadLibraryFlags.LoadWithAlteredSearchPath">
            <summary>
            Load with an altered search path.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.SafeLoadLibraryHandle">
            <summary>
            Safe handle for a loaded library.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="handle">The handle to the library</param>
            <param name="owns_handle">True if the handle is owned by this object.</param>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.ReleaseHandle">
            <summary>
            Release handle.
            </summary>
            <returns>True if handle released.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.GetProcAddress(System.String)">
            <summary>
            Get the address of an exported function.
            </summary>
            <param name="name">The name of the exported function.</param>
            <returns>Pointer to the exported function, or IntPtr.Zero if it can't be found.</returns>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeLoadLibraryHandle.FullPath">
            <summary>
            Get path to loaded module.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.LoadLibrary(System.String,NtApiDotNet.Win32.LoadLibraryFlags)">
            <summary>
            Load a library into memory.
            </summary>
            <param name="name">The path to the library.</param>
            <param name="flags">Additonal flags to pass to LoadLibraryEx</param>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.Win32.SafeLoadLibraryHandle.LoadLibrary(System.String)">
            <summary>
            Load a library into memory.
            </summary>
            <param name="name">The path to the library.</param>
            <returns></returns>
        </member>
        <member name="T:NtApiDotNet.Win32.SafeWin32Exception">
            <summary>
            Represents an impersonation safe win32 exception, which resolves the win32 message when Message is called.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.SafeWin32Exception.Message">
            <summary>
            The message for the exception.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ServiceTriggerType">
            <summary>
            Service trigger type.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ServiceInformation">
            <summary>
            Class representing the information about a service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ServiceInformation.Name">
            <summary>
            The name of the service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ServiceInformation.SecurityDescriptor">
            <summary>
            The security descriptor of the service.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.ServiceInformation.Triggers">
            <summary>
            The list of triggers for the service.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ServiceUtils">
            <summary>
            Utilities for accessing services.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetScmGenericMapping">
            <summary>
            Get the generic mapping for the SCM.
            </summary>
            <returns>The SCM generic mapping.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetServiceGenericMapping">
            <summary>
            Get the generic mapping for a service.
            </summary>
            <returns>The service generic mapping.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetScmSecurityDescriptor">
            <summary>
            Get the security descriptor of the SCM.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NtApiDotNet.Win32.ServiceUtils.GetServiceInformation(System.String)">
            <summary>
            Get the information about a service.
            </summary>
            <param name="name">The name of the service.</param>
            <returns>The servicec information.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.SaferLevel">
            <summary>
            Enumeration for safer level.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SaferLevel.Constrained">
            <summary>
            Constrained.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SaferLevel.FullyTrusted">
            <summary>
            Fully trusted.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SaferLevel.NormalUser">
            <summary>
            Normal user.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.SaferLevel.Untrusted">
            <summary>
            Untrusted.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.TokenUtils">
            <summary>
            Class to access tokens through various mechanisms.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetLogonS4UToken(System.String,System.String,NtApiDotNet.Win32.SecurityLogonType)">
            <summary>
            Logon a user using S4U
            </summary>
            <param name="user">The username.</param>
            <param name="realm">The user's realm.</param>
            <param name="logon_type"></param>
            <returns>The logged on token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetAnonymousToken(NtApiDotNet.TokenAccessRights)">
            <summary>
            Get the anonymous token.
            </summary>
            <param name="desired_access">The access rights for the opened token.</param>
            <returns>The anonymous token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetAnonymousToken">
            <summary>
            Get the anonymous token.
            </summary>
            <returns>The anonymous token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetLogonUserToken(System.String,System.String,System.String,NtApiDotNet.Win32.SecurityLogonType,System.Collections.Generic.IEnumerable{NtApiDotNet.UserGroup})">
            <summary>
            Logon a user.
            </summary>
            <param name="username">The username.</param>
            <param name="domain">The user's domain.</param>
            <param name="password">The user's password.</param>
            <param name="logon_type">The logon token's type.</param>
            <param name="groups">Optional list of additonal groups to add.</param>
            <returns>The logged on token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetTokenFromClipboard(NtApiDotNet.TokenAccessRights)">
            <summary>
            Get the token from the clipboard.
            </summary>
            <param name="desired_access">The access rights for the opened token.</param>
            <returns>The clipboard token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetTokenFromClipboard">
            <summary>
            Get the token from the clipboard.
            </summary>
            <returns>The clipboard token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.DerivePackageSidFromName(System.String)">
            <summary>
            Derive a package sid from a name.
            </summary>
            <param name="name">The name of the package.</param>
            <returns>The derived Sid</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.DeriveRestrictedPackageSidFromSid(NtApiDotNet.Sid,System.String)">
            <summary>
            Derive a restricted package sid from an existing pacakge sid.
            </summary>
            <param name="package_sid">The base package sid.</param>
            <param name="restricted_name">The restricted name for the sid.</param>
            <returns>The derived Sid.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.DeriveRestrictedPackageSidFromName(System.String,System.String)">
            <summary>
            Derive a restricted package sid from an existing pacakge sid.
            </summary>
            <param name="base_name">The base package name.</param>
            <param name="restricted_name">The restricted name for the sid.</param>
            <returns>The derived Sid.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetPackageSidFromName(System.String)">
            <summary>
            Get the package sid from a name.
            </summary>
            <param name="name">The name of the package, can be either an SDDL sid or a package name.</param>
            <returns>The derived sid.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetTokenFromSaferLevel(NtApiDotNet.NtToken,NtApiDotNet.Win32.SaferLevel,System.Boolean)">
            <summary>
            Get a safer token.
            </summary>
            <param name="token">The base token.</param>
            <param name="level">The safer level to use.</param>
            <param name="make_inert">True to make the token inert.</param>
            <returns>The safer token.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.TokenUtils.GetSessionTokens">
            <summary>
            Get tokens for all logged on sessions.
            </summary>
            <remarks>Needs SeTcbPrivilege to work.</remarks>
            <returns>The list of session tokens.</returns>
        </member>
        <member name="T:NtApiDotNet.Win32.CreateProcessFlags">
            <summary>
            Flags for create process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.BreakawayFromJob">
            <summary>
            Breakaway from a job object.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.DefaultErrorMode">
            <summary>
            Default error mode.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.NewConsole">
            <summary>
            Create a new console.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.NewProcessGroup">
            <summary>
            Create a new process group.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.NoWindow">
            <summary>
            No window.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.ProtectedProcess">
            <summary>
            Create a protected process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.PreserveCodeAuthZLevel">
            <summary>
            Preserve code authz level.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.SeparateWowVdm">
            <summary>
            Create a separate WOW VDM.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.SharedWowVdm">
            <summary>
            Share the WOW VDM.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.Suspended">
            <summary>
            Create suspended.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.UnicodeEnvironment">
            <summary>
            Create from a unicode environment.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.DebugOnlyThisProcess">
            <summary>
            Debug only this process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.DebugProcess">
            <summary>
            Debug process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.DetachedProcess">
            <summary>
            Detach process.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.ExtendedStartupInfoPresent">
            <summary>
            Specify extended startup information is present.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessFlags.InheritParentAffinity">
            <summary>
            Inherit parent affinity.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.CreateProcessLogonFlags">
            <summary>
            Flags for CreateProcessWithLogon
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessLogonFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessLogonFlags.WithProfile">
            <summary>
            With a profile.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.CreateProcessLogonFlags.NetCredentialsOnly">
            <summary>
            Using network credentials.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Win32kFilterFlags">
            <summary>
            Win32k filter flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32kFilterFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32kFilterFlags.Enable">
            <summary>
            Enable filter.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.Win32kFilterFlags.Audit">
            <summary>
            Audit filter.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ProtectionLevel">
            <summary>
            Specify PPL level.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.Same">
            <summary>
            Safe level as parent.
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.TcbPPL">
            <summary>
            Tcb PPL
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.WindowsPP">
            <summary>
            Windows PP
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.WindowsPPL">
            <summary>
            Windows PPL
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.AntimalwarePPL">
            <summary>
            Antimalware PPL
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.LsaPPL">
            <summary>
            LSA PPL
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.TcbPP">
            <summary>
            Tcb PP
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.CodeGenPPL">
            <summary>
            Code Generation PPL
            </summary>
        </member>
        <member name="F:NtApiDotNet.Win32.ProtectionLevel.AuthenticodePP">
            <summary>
            Authenticode PP
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ProcessMitigationOptions">
            <summary>
            Process mitigation option flags.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.ProcessMitigationOptions2">
            <summary>
            Process mitigation option 2 flags.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Win32ProcessConfig">
            <summary>
            Win32 process creation configuration.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ProcessSecurityDescriptor">
            <summary>
            Specify security descriptor of process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.InheritProcessHandle">
            <summary>
            Specify process handle is inheritable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ThreadSecurityDescriptor">
            <summary>
            Specify security descriptor of thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.InheritThreadHandle">
            <summary>
            Specify thread handle is inheritable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.InheritHandles">
            <summary>
            Specify to inherit handles.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ParentProcess">
            <summary>
            Specify parent process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ApplicationName">
            <summary>
            Specify path to application executable.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.CommandLine">
            <summary>
            Specify command line.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.CreationFlags">
            <summary>
            Specify creation flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Environment">
            <summary>
            Specify environment block.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.CurrentDirectory">
            <summary>
            Specify current directory.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Desktop">
            <summary>
            Specify desktop name.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Title">
            <summary>
            Specify window title.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.TerminateOnDispose">
            <summary>
            True to terminate the process when it's disposed.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.MitigationOptions">
            <summary>
            Specify the mitigation options.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.MitigationOptions2">
            <summary>
            Specify the mitigation options 2.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Win32kFilterFlags">
            <summary>
            Specify win32k filter flags.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Win32kFilterLevel">
            <summary>
            Specify win32k filter level.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.ProtectionLevel">
            <summary>
            Specify PP level.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.InheritHandleList">
            <summary>
            Specify list of handles to inherit.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.AppContainerSid">
            <summary>
            Specify the appcontainer Sid.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.Capabilities">
            <summary>
            Specify the appcontainer capabilities.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.LowPrivilegeAppContainer">
            <summary>
            Specify LPAC.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.RestrictChildProcessCreation">
            <summary>
            Restrict the process from creating child processes.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32ProcessConfig.DesktopAppBreakaway">
            <summary>
            Specify new process policy when creating a desktop bridge application.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32ProcessConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:NtApiDotNet.Win32.Win32Process">
            <summary>
            Class representing a win32 process.
            </summary>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcessAsUser(NtApiDotNet.NtToken,NtApiDotNet.Win32.Win32ProcessConfig)">
            <summary>
            Create process with a token.
            </summary>
            <param name="token">The token to create the process with.</param>
            <param name="config">The process configuration.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcessAsUser(NtApiDotNet.NtToken,System.String,System.String,NtApiDotNet.Win32.CreateProcessFlags,System.String)">
            <summary>
            Create process with a token.
            </summary>
            <param name="token">The token to create the process with.</param>
            <param name="application_name">The path to the executable.</param>
            <param name="command_line">The process command line.</param>
            <param name="flags">Process creation flags.</param>
            <param name="desktop">The desktop name.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcessWithLogin(System.String,System.String,System.String,NtApiDotNet.Win32.CreateProcessLogonFlags,NtApiDotNet.Win32.Win32ProcessConfig)">
            <summary>
            Create process with a token from a user logon.
            </summary>
            <param name="username">The username.</param>
            <param name="domain">The user's domain.</param>
            <param name="password">The user's password.</param>
            <param name="logon_flags">Logon flags.</param>
            <param name="config">The process configuration.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcessWithLogin(System.String,System.String,System.String,NtApiDotNet.Win32.CreateProcessLogonFlags,System.String,System.String,NtApiDotNet.Win32.CreateProcessFlags,System.String)">
            <summary>
            Create process with a token from a user logon.
            </summary>
            <param name="username">The username.</param>
            <param name="domain">The user's domain.</param>
            <param name="password">The user's password.</param>
            <param name="logon_flags">Logon flags.</param>
            <param name="application_name">The path to the executable.</param>
            <param name="command_line">The process command line.</param>
            <param name="flags">Process creation flags.</param>
            <param name="desktop">The desktop name.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcess(NtApiDotNet.Win32.Win32ProcessConfig)">
            <summary>
            Create process.
            </summary>
            <param name="config">The process configuration.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.CreateProcess(NtApiDotNet.NtProcess,System.String,System.String,NtApiDotNet.Win32.CreateProcessFlags,System.String)">
            <summary>
            Create process.
            </summary>
            <param name="parent">Optional parent process.</param>
            <param name="application_name">The path to the executable.</param>
            <param name="command_line">The process command line.</param>
            <param name="flags">Process creation flags.</param>
            <param name="desktop">The desktop name.</param>
            <returns>The created win32 process.</returns>
        </member>
        <member name="M:NtApiDotNet.Win32.Win32Process.Dispose">
            <summary>
            Dispose the process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Process.Process">
            <summary>
            The handle to the process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Process.Thread">
            <summary>
            The handle to the initial thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Process.Pid">
            <summary>
            The process ID of the process.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Process.Tid">
            <summary>
            The thread ID of the initial thread.
            </summary>
        </member>
        <member name="P:NtApiDotNet.Win32.Win32Process.TerminateOnDispose">
            <summary>
            True to terminate process when disposed.
            </summary>
        </member>
    </members>
</doc>
